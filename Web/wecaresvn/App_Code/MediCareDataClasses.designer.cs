#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.34014
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Medicare")]
public partial class MediCareDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region 擴充性方法定義
  partial void OnCreated();
  partial void InsertDiagnosis(Diagnosis instance);
  partial void UpdateDiagnosis(Diagnosis instance);
  partial void DeleteDiagnosis(Diagnosis instance);
  partial void InsertWorkShifts(WorkShifts instance);
  partial void UpdateWorkShifts(WorkShifts instance);
  partial void DeleteWorkShifts(WorkShifts instance);
  partial void InsertDivisions(Divisions instance);
  partial void UpdateDivisions(Divisions instance);
  partial void DeleteDivisions(Divisions instance);
  partial void InsertDrugCalendar(DrugCalendar instance);
  partial void UpdateDrugCalendar(DrugCalendar instance);
  partial void DeleteDrugCalendar(DrugCalendar instance);
  partial void InsertDrugFrequencies(DrugFrequencies instance);
  partial void UpdateDrugFrequencies(DrugFrequencies instance);
  partial void DeleteDrugFrequencies(DrugFrequencies instance);
  partial void InsertDrugOverview(DrugOverview instance);
  partial void UpdateDrugOverview(DrugOverview instance);
  partial void DeleteDrugOverview(DrugOverview instance);
  partial void InsertDrugSchedules(DrugSchedules instance);
  partial void UpdateDrugSchedules(DrugSchedules instance);
  partial void DeleteDrugSchedules(DrugSchedules instance);
  partial void InsertEvaluation(Evaluation instance);
  partial void UpdateEvaluation(Evaluation instance);
  partial void DeleteEvaluation(Evaluation instance);
  partial void InsertExamCalendar(ExamCalendar instance);
  partial void UpdateExamCalendar(ExamCalendar instance);
  partial void DeleteExamCalendar(ExamCalendar instance);
  partial void InsertExamCategories(ExamCategories instance);
  partial void UpdateExamCategories(ExamCategories instance);
  partial void DeleteExamCategories(ExamCategories instance);
  partial void InsertExamConsequences(ExamConsequences instance);
  partial void UpdateExamConsequences(ExamConsequences instance);
  partial void DeleteExamConsequences(ExamConsequences instance);
  partial void InsertExamFrequencies(ExamFrequencies instance);
  partial void UpdateExamFrequencies(ExamFrequencies instance);
  partial void DeleteExamFrequencies(ExamFrequencies instance);
  partial void InsertExamOverview(ExamOverview instance);
  partial void UpdateExamOverview(ExamOverview instance);
  partial void DeleteExamOverview(ExamOverview instance);
  partial void InsertExamSchedules(ExamSchedules instance);
  partial void UpdateExamSchedules(ExamSchedules instance);
  partial void DeleteExamSchedules(ExamSchedules instance);
  partial void InsertForms(Forms instance);
  partial void UpdateForms(Forms instance);
  partial void DeleteForms(Forms instance);
  partial void InsertHealthKnowledge(HealthKnowledge instance);
  partial void UpdateHealthKnowledge(HealthKnowledge instance);
  partial void DeleteHealthKnowledge(HealthKnowledge instance);
  partial void InsertJobTitles(JobTitles instance);
  partial void UpdateJobTitles(JobTitles instance);
  partial void DeleteJobTitles(JobTitles instance);
  partial void InsertNews(News instance);
  partial void UpdateNews(News instance);
  partial void DeleteNews(News instance);
  partial void InsertOutpatientInformation(OutpatientInformation instance);
  partial void UpdateOutpatientInformation(OutpatientInformation instance);
  partial void DeleteOutpatientInformation(OutpatientInformation instance);
  partial void InsertPatients(Patients instance);
  partial void UpdatePatients(Patients instance);
  partial void DeletePatients(Patients instance);
  partial void InsertRegisterInformation(RegisterInformation instance);
  partial void UpdateRegisterInformation(RegisterInformation instance);
  partial void DeleteRegisterInformation(RegisterInformation instance);
  partial void InsertRemindDays(RemindDays instance);
  partial void UpdateRemindDays(RemindDays instance);
  partial void DeleteRemindDays(RemindDays instance);
  partial void InsertSituations(Situations instance);
  partial void UpdateSituations(Situations instance);
  partial void DeleteSituations(Situations instance);
  partial void InsertStaffs(Staffs instance);
  partial void UpdateStaffs(Staffs instance);
  partial void DeleteStaffs(Staffs instance);
  partial void InsertTimeLines(TimeLines instance);
  partial void UpdateTimeLines(TimeLines instance);
  partial void DeleteTimeLines(TimeLines instance);
  partial void InsertUseRecords(UseRecords instance);
  partial void UpdateUseRecords(UseRecords instance);
  partial void DeleteUseRecords(UseRecords instance);
  #endregion
	
	public MediCareDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MediCareDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MediCareDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public MediCareDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Diagnosis> Diagnosis
	{
		get
		{
			return this.GetTable<Diagnosis>();
		}
	}
	
	public System.Data.Linq.Table<WorkShifts> WorkShifts
	{
		get
		{
			return this.GetTable<WorkShifts>();
		}
	}
	
	public System.Data.Linq.Table<Divisions> Divisions
	{
		get
		{
			return this.GetTable<Divisions>();
		}
	}
	
	public System.Data.Linq.Table<DrugCalendar> DrugCalendar
	{
		get
		{
			return this.GetTable<DrugCalendar>();
		}
	}
	
	public System.Data.Linq.Table<DrugFrequencies> DrugFrequencies
	{
		get
		{
			return this.GetTable<DrugFrequencies>();
		}
	}
	
	public System.Data.Linq.Table<DrugOverview> DrugOverview
	{
		get
		{
			return this.GetTable<DrugOverview>();
		}
	}
	
	public System.Data.Linq.Table<DrugSchedules> DrugSchedules
	{
		get
		{
			return this.GetTable<DrugSchedules>();
		}
	}
	
	public System.Data.Linq.Table<Evaluation> Evaluation
	{
		get
		{
			return this.GetTable<Evaluation>();
		}
	}
	
	public System.Data.Linq.Table<ExamCalendar> ExamCalendar
	{
		get
		{
			return this.GetTable<ExamCalendar>();
		}
	}
	
	public System.Data.Linq.Table<ExamCategories> ExamCategories
	{
		get
		{
			return this.GetTable<ExamCategories>();
		}
	}
	
	public System.Data.Linq.Table<ExamConsequences> ExamConsequences
	{
		get
		{
			return this.GetTable<ExamConsequences>();
		}
	}
	
	public System.Data.Linq.Table<ExamFrequencies> ExamFrequencies
	{
		get
		{
			return this.GetTable<ExamFrequencies>();
		}
	}
	
	public System.Data.Linq.Table<ExamOverview> ExamOverview
	{
		get
		{
			return this.GetTable<ExamOverview>();
		}
	}
	
	public System.Data.Linq.Table<ExamSchedules> ExamSchedules
	{
		get
		{
			return this.GetTable<ExamSchedules>();
		}
	}
	
	public System.Data.Linq.Table<Forms> Forms
	{
		get
		{
			return this.GetTable<Forms>();
		}
	}
	
	public System.Data.Linq.Table<HealthKnowledge> HealthKnowledge
	{
		get
		{
			return this.GetTable<HealthKnowledge>();
		}
	}
	
	public System.Data.Linq.Table<JobTitles> JobTitles
	{
		get
		{
			return this.GetTable<JobTitles>();
		}
	}
	
	public System.Data.Linq.Table<News> News
	{
		get
		{
			return this.GetTable<News>();
		}
	}
	
	public System.Data.Linq.Table<OutpatientInformation> OutpatientInformation
	{
		get
		{
			return this.GetTable<OutpatientInformation>();
		}
	}
	
	public System.Data.Linq.Table<Patients> Patients
	{
		get
		{
			return this.GetTable<Patients>();
		}
	}
	
	public System.Data.Linq.Table<RegisterInformation> RegisterInformation
	{
		get
		{
			return this.GetTable<RegisterInformation>();
		}
	}
	
	public System.Data.Linq.Table<RemindDays> RemindDays
	{
		get
		{
			return this.GetTable<RemindDays>();
		}
	}
	
	public System.Data.Linq.Table<Situations> Situations
	{
		get
		{
			return this.GetTable<Situations>();
		}
	}
	
	public System.Data.Linq.Table<Staffs> Staffs
	{
		get
		{
			return this.GetTable<Staffs>();
		}
	}
	
	public System.Data.Linq.Table<TimeLines> TimeLines
	{
		get
		{
			return this.GetTable<TimeLines>();
		}
	}
	
	public System.Data.Linq.Table<UseRecords> UseRecords
	{
		get
		{
			return this.GetTable<UseRecords>();
		}
	}
	
	public System.Data.Linq.Table<View_DrugCalendars> View_DrugCalendars
	{
		get
		{
			return this.GetTable<View_DrugCalendars>();
		}
	}
	
	public System.Data.Linq.Table<View_ExamSchedules> View_ExamSchedules
	{
		get
		{
			return this.GetTable<View_ExamSchedules>();
		}
	}
	
	public System.Data.Linq.Table<View_DrugReminder> View_DrugReminder
	{
		get
		{
			return this.GetTable<View_DrugReminder>();
		}
	}
	
	public System.Data.Linq.Table<View_DrugSchedules> View_DrugSchedules
	{
		get
		{
			return this.GetTable<View_DrugSchedules>();
		}
	}
	
	public System.Data.Linq.Table<View_Evaluation> View_Evaluation
	{
		get
		{
			return this.GetTable<View_Evaluation>();
		}
	}
	
	public System.Data.Linq.Table<View_ExamCalendars> View_ExamCalendars
	{
		get
		{
			return this.GetTable<View_ExamCalendars>();
		}
	}
	
	public System.Data.Linq.Table<View_ExamReminder> View_ExamReminder
	{
		get
		{
			return this.GetTable<View_ExamReminder>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Diagnosis")]
public partial class Diagnosis : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Diag_ID;
	
	private int _RegInfo_ID;
	
	private string _Diag_CoD;
	
	private System.Nullable<System.DateTime> _Diag_ND;
	
	private int _Docter_ID;
	
	private int _Nurse_ID;
	
	private int _Counselor_ID;
	
	private int _RmdDay_ID;
	
	private EntitySet<DrugSchedules> _DrugSchedules;
	
	private EntitySet<Evaluation> _Evaluation;
	
	private EntitySet<ExamSchedules> _ExamSchedules;
	
	private EntityRef<RegisterInformation> _RegisterInformation;
	
	private EntityRef<RemindDays> _RemindDays;
	
	private EntityRef<Staffs> _Staffs;
	
	private EntityRef<Staffs> _Staffs1;
	
	private EntityRef<Staffs> _Staffs2;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiag_IDChanging(int value);
    partial void OnDiag_IDChanged();
    partial void OnRegInfo_IDChanging(int value);
    partial void OnRegInfo_IDChanged();
    partial void OnDiag_CoDChanging(string value);
    partial void OnDiag_CoDChanged();
    partial void OnDiag_NDChanging(System.Nullable<System.DateTime> value);
    partial void OnDiag_NDChanged();
    partial void OnDocter_IDChanging(int value);
    partial void OnDocter_IDChanged();
    partial void OnNurse_IDChanging(int value);
    partial void OnNurse_IDChanged();
    partial void OnCounselor_IDChanging(int value);
    partial void OnCounselor_IDChanged();
    partial void OnRmdDay_IDChanging(int value);
    partial void OnRmdDay_IDChanged();
    #endregion
	
	public Diagnosis()
	{
		this._DrugSchedules = new EntitySet<DrugSchedules>(new Action<DrugSchedules>(this.attach_DrugSchedules), new Action<DrugSchedules>(this.detach_DrugSchedules));
		this._Evaluation = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluation), new Action<Evaluation>(this.detach_Evaluation));
		this._ExamSchedules = new EntitySet<ExamSchedules>(new Action<ExamSchedules>(this.attach_ExamSchedules), new Action<ExamSchedules>(this.detach_ExamSchedules));
		this._RegisterInformation = default(EntityRef<RegisterInformation>);
		this._RemindDays = default(EntityRef<RemindDays>);
		this._Staffs = default(EntityRef<Staffs>);
		this._Staffs1 = default(EntityRef<Staffs>);
		this._Staffs2 = default(EntityRef<Staffs>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diag_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Diag_ID
	{
		get
		{
			return this._Diag_ID;
		}
		set
		{
			if ((this._Diag_ID != value))
			{
				this.OnDiag_IDChanging(value);
				this.SendPropertyChanging();
				this._Diag_ID = value;
				this.SendPropertyChanged("Diag_ID");
				this.OnDiag_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegInfo_ID", DbType="Int NOT NULL")]
	public int RegInfo_ID
	{
		get
		{
			return this._RegInfo_ID;
		}
		set
		{
			if ((this._RegInfo_ID != value))
			{
				if (this._RegisterInformation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRegInfo_IDChanging(value);
				this.SendPropertyChanging();
				this._RegInfo_ID = value;
				this.SendPropertyChanged("RegInfo_ID");
				this.OnRegInfo_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diag_CoD", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Diag_CoD
	{
		get
		{
			return this._Diag_CoD;
		}
		set
		{
			if ((this._Diag_CoD != value))
			{
				this.OnDiag_CoDChanging(value);
				this.SendPropertyChanging();
				this._Diag_CoD = value;
				this.SendPropertyChanged("Diag_CoD");
				this.OnDiag_CoDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diag_ND", DbType="Date")]
	public System.Nullable<System.DateTime> Diag_ND
	{
		get
		{
			return this._Diag_ND;
		}
		set
		{
			if ((this._Diag_ND != value))
			{
				this.OnDiag_NDChanging(value);
				this.SendPropertyChanging();
				this._Diag_ND = value;
				this.SendPropertyChanged("Diag_ND");
				this.OnDiag_NDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Docter_ID", DbType="Int NOT NULL")]
	public int Docter_ID
	{
		get
		{
			return this._Docter_ID;
		}
		set
		{
			if ((this._Docter_ID != value))
			{
				if (this._Staffs.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocter_IDChanging(value);
				this.SendPropertyChanging();
				this._Docter_ID = value;
				this.SendPropertyChanged("Docter_ID");
				this.OnDocter_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nurse_ID", DbType="Int NOT NULL")]
	public int Nurse_ID
	{
		get
		{
			return this._Nurse_ID;
		}
		set
		{
			if ((this._Nurse_ID != value))
			{
				if (this._Staffs1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnNurse_IDChanging(value);
				this.SendPropertyChanging();
				this._Nurse_ID = value;
				this.SendPropertyChanged("Nurse_ID");
				this.OnNurse_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Counselor_ID", DbType="Int NOT NULL")]
	public int Counselor_ID
	{
		get
		{
			return this._Counselor_ID;
		}
		set
		{
			if ((this._Counselor_ID != value))
			{
				if (this._Staffs2.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCounselor_IDChanging(value);
				this.SendPropertyChanging();
				this._Counselor_ID = value;
				this.SendPropertyChanged("Counselor_ID");
				this.OnCounselor_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RmdDay_ID", DbType="Int NOT NULL")]
	public int RmdDay_ID
	{
		get
		{
			return this._RmdDay_ID;
		}
		set
		{
			if ((this._RmdDay_ID != value))
			{
				if (this._RemindDays.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRmdDay_IDChanging(value);
				this.SendPropertyChanging();
				this._RmdDay_ID = value;
				this.SendPropertyChanged("RmdDay_ID");
				this.OnRmdDay_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosis_DrugSchedules", Storage="_DrugSchedules", ThisKey="Diag_ID", OtherKey="Diag_ID")]
	public EntitySet<DrugSchedules> DrugSchedules
	{
		get
		{
			return this._DrugSchedules;
		}
		set
		{
			this._DrugSchedules.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosis_Evaluation", Storage="_Evaluation", ThisKey="Diag_ID", OtherKey="Diag_ID")]
	public EntitySet<Evaluation> Evaluation
	{
		get
		{
			return this._Evaluation;
		}
		set
		{
			this._Evaluation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosis_ExamSchedules", Storage="_ExamSchedules", ThisKey="Diag_ID", OtherKey="Diag_ID")]
	public EntitySet<ExamSchedules> ExamSchedules
	{
		get
		{
			return this._ExamSchedules;
		}
		set
		{
			this._ExamSchedules.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisterInformation_Diagnosis", Storage="_RegisterInformation", ThisKey="RegInfo_ID", OtherKey="RegInfo_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public RegisterInformation RegisterInformation
	{
		get
		{
			return this._RegisterInformation.Entity;
		}
		set
		{
			RegisterInformation previousValue = this._RegisterInformation.Entity;
			if (((previousValue != value) 
						|| (this._RegisterInformation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._RegisterInformation.Entity = null;
					previousValue.Diagnosis.Remove(this);
				}
				this._RegisterInformation.Entity = value;
				if ((value != null))
				{
					value.Diagnosis.Add(this);
					this._RegInfo_ID = value.RegInfo_ID;
				}
				else
				{
					this._RegInfo_ID = default(int);
				}
				this.SendPropertyChanged("RegisterInformation");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RemindDays_Diagnosis", Storage="_RemindDays", ThisKey="RmdDay_ID", OtherKey="RmdDays_ID", IsForeignKey=true)]
	public RemindDays RemindDays
	{
		get
		{
			return this._RemindDays.Entity;
		}
		set
		{
			RemindDays previousValue = this._RemindDays.Entity;
			if (((previousValue != value) 
						|| (this._RemindDays.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._RemindDays.Entity = null;
					previousValue.Diagnosis.Remove(this);
				}
				this._RemindDays.Entity = value;
				if ((value != null))
				{
					value.Diagnosis.Add(this);
					this._RmdDay_ID = value.RmdDays_ID;
				}
				else
				{
					this._RmdDay_ID = default(int);
				}
				this.SendPropertyChanged("RemindDays");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_Diagnosis", Storage="_Staffs", ThisKey="Docter_ID", OtherKey="Staff_ID", IsForeignKey=true)]
	public Staffs Staffs
	{
		get
		{
			return this._Staffs.Entity;
		}
		set
		{
			Staffs previousValue = this._Staffs.Entity;
			if (((previousValue != value) 
						|| (this._Staffs.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Staffs.Entity = null;
					previousValue.Diagnosis.Remove(this);
				}
				this._Staffs.Entity = value;
				if ((value != null))
				{
					value.Diagnosis.Add(this);
					this._Docter_ID = value.Staff_ID;
				}
				else
				{
					this._Docter_ID = default(int);
				}
				this.SendPropertyChanged("Staffs");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_Diagnosis1", Storage="_Staffs1", ThisKey="Nurse_ID", OtherKey="Staff_ID", IsForeignKey=true)]
	public Staffs Staffs1
	{
		get
		{
			return this._Staffs1.Entity;
		}
		set
		{
			Staffs previousValue = this._Staffs1.Entity;
			if (((previousValue != value) 
						|| (this._Staffs1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Staffs1.Entity = null;
					previousValue.Diagnosis1.Remove(this);
				}
				this._Staffs1.Entity = value;
				if ((value != null))
				{
					value.Diagnosis1.Add(this);
					this._Nurse_ID = value.Staff_ID;
				}
				else
				{
					this._Nurse_ID = default(int);
				}
				this.SendPropertyChanged("Staffs1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_Diagnosis2", Storage="_Staffs2", ThisKey="Counselor_ID", OtherKey="Staff_ID", IsForeignKey=true)]
	public Staffs Staffs2
	{
		get
		{
			return this._Staffs2.Entity;
		}
		set
		{
			Staffs previousValue = this._Staffs2.Entity;
			if (((previousValue != value) 
						|| (this._Staffs2.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Staffs2.Entity = null;
					previousValue.Diagnosis2.Remove(this);
				}
				this._Staffs2.Entity = value;
				if ((value != null))
				{
					value.Diagnosis2.Add(this);
					this._Counselor_ID = value.Staff_ID;
				}
				else
				{
					this._Counselor_ID = default(int);
				}
				this.SendPropertyChanged("Staffs2");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DrugSchedules(DrugSchedules entity)
	{
		this.SendPropertyChanging();
		entity.Diagnosis = this;
	}
	
	private void detach_DrugSchedules(DrugSchedules entity)
	{
		this.SendPropertyChanging();
		entity.Diagnosis = null;
	}
	
	private void attach_Evaluation(Evaluation entity)
	{
		this.SendPropertyChanging();
		entity.Diagnosis = this;
	}
	
	private void detach_Evaluation(Evaluation entity)
	{
		this.SendPropertyChanging();
		entity.Diagnosis = null;
	}
	
	private void attach_ExamSchedules(ExamSchedules entity)
	{
		this.SendPropertyChanging();
		entity.Diagnosis = this;
	}
	
	private void detach_ExamSchedules(ExamSchedules entity)
	{
		this.SendPropertyChanging();
		entity.Diagnosis = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkShifts")]
public partial class WorkShifts : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TI_ID;
	
	private string _TI_Name;
	
	private EntitySet<ExamCalendar> _ExamCalendar;
	
	private EntitySet<OutpatientInformation> _OutpatientInformation;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTI_IDChanging(int value);
    partial void OnTI_IDChanged();
    partial void OnTI_NameChanging(string value);
    partial void OnTI_NameChanged();
    #endregion
	
	public WorkShifts()
	{
		this._ExamCalendar = new EntitySet<ExamCalendar>(new Action<ExamCalendar>(this.attach_ExamCalendar), new Action<ExamCalendar>(this.detach_ExamCalendar));
		this._OutpatientInformation = new EntitySet<OutpatientInformation>(new Action<OutpatientInformation>(this.attach_OutpatientInformation), new Action<OutpatientInformation>(this.detach_OutpatientInformation));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TI_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TI_ID
	{
		get
		{
			return this._TI_ID;
		}
		set
		{
			if ((this._TI_ID != value))
			{
				this.OnTI_IDChanging(value);
				this.SendPropertyChanging();
				this._TI_ID = value;
				this.SendPropertyChanged("TI_ID");
				this.OnTI_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TI_Name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TI_Name
	{
		get
		{
			return this._TI_Name;
		}
		set
		{
			if ((this._TI_Name != value))
			{
				this.OnTI_NameChanging(value);
				this.SendPropertyChanging();
				this._TI_Name = value;
				this.SendPropertyChanged("TI_Name");
				this.OnTI_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkShifts_ExamCalendar", Storage="_ExamCalendar", ThisKey="TI_ID", OtherKey="TI_ID")]
	public EntitySet<ExamCalendar> ExamCalendar
	{
		get
		{
			return this._ExamCalendar;
		}
		set
		{
			this._ExamCalendar.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkShifts_OutpatientInformation", Storage="_OutpatientInformation", ThisKey="TI_ID", OtherKey="TI_ID")]
	public EntitySet<OutpatientInformation> OutpatientInformation
	{
		get
		{
			return this._OutpatientInformation;
		}
		set
		{
			this._OutpatientInformation.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.WorkShifts = this;
	}
	
	private void detach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.WorkShifts = null;
	}
	
	private void attach_OutpatientInformation(OutpatientInformation entity)
	{
		this.SendPropertyChanging();
		entity.WorkShifts = this;
	}
	
	private void detach_OutpatientInformation(OutpatientInformation entity)
	{
		this.SendPropertyChanging();
		entity.WorkShifts = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Divisions")]
public partial class Divisions : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Div_ID;
	
	private string _Div_Name;
	
	private EntitySet<Staffs> _Staffs;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiv_IDChanging(int value);
    partial void OnDiv_IDChanged();
    partial void OnDiv_NameChanging(string value);
    partial void OnDiv_NameChanged();
    #endregion
	
	public Divisions()
	{
		this._Staffs = new EntitySet<Staffs>(new Action<Staffs>(this.attach_Staffs), new Action<Staffs>(this.detach_Staffs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Div_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Div_ID
	{
		get
		{
			return this._Div_ID;
		}
		set
		{
			if ((this._Div_ID != value))
			{
				this.OnDiv_IDChanging(value);
				this.SendPropertyChanging();
				this._Div_ID = value;
				this.SendPropertyChanged("Div_ID");
				this.OnDiv_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Div_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Div_Name
	{
		get
		{
			return this._Div_Name;
		}
		set
		{
			if ((this._Div_Name != value))
			{
				this.OnDiv_NameChanging(value);
				this.SendPropertyChanging();
				this._Div_Name = value;
				this.SendPropertyChanged("Div_Name");
				this.OnDiv_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Divisions_Staffs", Storage="_Staffs", ThisKey="Div_ID", OtherKey="Div_ID")]
	public EntitySet<Staffs> Staffs
	{
		get
		{
			return this._Staffs;
		}
		set
		{
			this._Staffs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Staffs(Staffs entity)
	{
		this.SendPropertyChanging();
		entity.Divisions = this;
	}
	
	private void detach_Staffs(Staffs entity)
	{
		this.SendPropertyChanging();
		entity.Divisions = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugCalendar")]
public partial class DrugCalendar : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DrugCal_ID;
	
	private int _DrugSch_ID;
	
	private int _RmdDay_ID;
	
	private int _Status_ID;
	
	private System.DateTime _DrugCal_SD;
	
	private string _DrugCal_Rem;
	
	private bool _DrugCal_Rmd;
	
	private EntityRef<DrugSchedules> _DrugSchedules;
	
	private EntityRef<Situations> _Situations;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugCal_IDChanging(int value);
    partial void OnDrugCal_IDChanged();
    partial void OnDrugSch_IDChanging(int value);
    partial void OnDrugSch_IDChanged();
    partial void OnRmdDay_IDChanging(int value);
    partial void OnRmdDay_IDChanged();
    partial void OnStatus_IDChanging(int value);
    partial void OnStatus_IDChanged();
    partial void OnDrugCal_SDChanging(System.DateTime value);
    partial void OnDrugCal_SDChanged();
    partial void OnDrugCal_RemChanging(string value);
    partial void OnDrugCal_RemChanged();
    partial void OnDrugCal_RmdChanging(bool value);
    partial void OnDrugCal_RmdChanged();
    #endregion
	
	public DrugCalendar()
	{
		this._DrugSchedules = default(EntityRef<DrugSchedules>);
		this._Situations = default(EntityRef<Situations>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugCal_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DrugCal_ID
	{
		get
		{
			return this._DrugCal_ID;
		}
		set
		{
			if ((this._DrugCal_ID != value))
			{
				this.OnDrugCal_IDChanging(value);
				this.SendPropertyChanging();
				this._DrugCal_ID = value;
				this.SendPropertyChanged("DrugCal_ID");
				this.OnDrugCal_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSch_ID", DbType="Int NOT NULL")]
	public int DrugSch_ID
	{
		get
		{
			return this._DrugSch_ID;
		}
		set
		{
			if ((this._DrugSch_ID != value))
			{
				if (this._DrugSchedules.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDrugSch_IDChanging(value);
				this.SendPropertyChanging();
				this._DrugSch_ID = value;
				this.SendPropertyChanged("DrugSch_ID");
				this.OnDrugSch_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RmdDay_ID", DbType="Int NOT NULL")]
	public int RmdDay_ID
	{
		get
		{
			return this._RmdDay_ID;
		}
		set
		{
			if ((this._RmdDay_ID != value))
			{
				this.OnRmdDay_IDChanging(value);
				this.SendPropertyChanging();
				this._RmdDay_ID = value;
				this.SendPropertyChanged("RmdDay_ID");
				this.OnRmdDay_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", DbType="Int NOT NULL")]
	public int Status_ID
	{
		get
		{
			return this._Status_ID;
		}
		set
		{
			if ((this._Status_ID != value))
			{
				if (this._Situations.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatus_IDChanging(value);
				this.SendPropertyChanging();
				this._Status_ID = value;
				this.SendPropertyChanged("Status_ID");
				this.OnStatus_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugCal_SD", DbType="Date NOT NULL")]
	public System.DateTime DrugCal_SD
	{
		get
		{
			return this._DrugCal_SD;
		}
		set
		{
			if ((this._DrugCal_SD != value))
			{
				this.OnDrugCal_SDChanging(value);
				this.SendPropertyChanging();
				this._DrugCal_SD = value;
				this.SendPropertyChanged("DrugCal_SD");
				this.OnDrugCal_SDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugCal_Rem", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string DrugCal_Rem
	{
		get
		{
			return this._DrugCal_Rem;
		}
		set
		{
			if ((this._DrugCal_Rem != value))
			{
				this.OnDrugCal_RemChanging(value);
				this.SendPropertyChanging();
				this._DrugCal_Rem = value;
				this.SendPropertyChanged("DrugCal_Rem");
				this.OnDrugCal_RemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugCal_Rmd", DbType="Bit NOT NULL")]
	public bool DrugCal_Rmd
	{
		get
		{
			return this._DrugCal_Rmd;
		}
		set
		{
			if ((this._DrugCal_Rmd != value))
			{
				this.OnDrugCal_RmdChanging(value);
				this.SendPropertyChanging();
				this._DrugCal_Rmd = value;
				this.SendPropertyChanged("DrugCal_Rmd");
				this.OnDrugCal_RmdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugSchedules_DrugCalendar", Storage="_DrugSchedules", ThisKey="DrugSch_ID", OtherKey="DrugSch_ID", IsForeignKey=true)]
	public DrugSchedules DrugSchedules
	{
		get
		{
			return this._DrugSchedules.Entity;
		}
		set
		{
			DrugSchedules previousValue = this._DrugSchedules.Entity;
			if (((previousValue != value) 
						|| (this._DrugSchedules.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DrugSchedules.Entity = null;
					previousValue.DrugCalendar.Remove(this);
				}
				this._DrugSchedules.Entity = value;
				if ((value != null))
				{
					value.DrugCalendar.Add(this);
					this._DrugSch_ID = value.DrugSch_ID;
				}
				else
				{
					this._DrugSch_ID = default(int);
				}
				this.SendPropertyChanged("DrugSchedules");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Situations_DrugCalendar", Storage="_Situations", ThisKey="Status_ID", OtherKey="Status_ID", IsForeignKey=true)]
	public Situations Situations
	{
		get
		{
			return this._Situations.Entity;
		}
		set
		{
			Situations previousValue = this._Situations.Entity;
			if (((previousValue != value) 
						|| (this._Situations.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Situations.Entity = null;
					previousValue.DrugCalendar.Remove(this);
				}
				this._Situations.Entity = value;
				if ((value != null))
				{
					value.DrugCalendar.Add(this);
					this._Status_ID = value.Status_ID;
				}
				else
				{
					this._Status_ID = default(int);
				}
				this.SendPropertyChanged("Situations");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugFrequencies")]
public partial class DrugFrequencies : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DrugFreq_ID;
	
	private string _DrugFreq_DFC;
	
	private System.Nullable<int> _DrugFreq_Days;
	
	private EntitySet<DrugSchedules> _DrugSchedules;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugFreq_IDChanging(int value);
    partial void OnDrugFreq_IDChanged();
    partial void OnDrugFreq_DFCChanging(string value);
    partial void OnDrugFreq_DFCChanged();
    partial void OnDrugFreq_DaysChanging(System.Nullable<int> value);
    partial void OnDrugFreq_DaysChanged();
    #endregion
	
	public DrugFrequencies()
	{
		this._DrugSchedules = new EntitySet<DrugSchedules>(new Action<DrugSchedules>(this.attach_DrugSchedules), new Action<DrugSchedules>(this.detach_DrugSchedules));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugFreq_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DrugFreq_ID
	{
		get
		{
			return this._DrugFreq_ID;
		}
		set
		{
			if ((this._DrugFreq_ID != value))
			{
				this.OnDrugFreq_IDChanging(value);
				this.SendPropertyChanging();
				this._DrugFreq_ID = value;
				this.SendPropertyChanged("DrugFreq_ID");
				this.OnDrugFreq_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugFreq_DFC", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string DrugFreq_DFC
	{
		get
		{
			return this._DrugFreq_DFC;
		}
		set
		{
			if ((this._DrugFreq_DFC != value))
			{
				this.OnDrugFreq_DFCChanging(value);
				this.SendPropertyChanging();
				this._DrugFreq_DFC = value;
				this.SendPropertyChanged("DrugFreq_DFC");
				this.OnDrugFreq_DFCChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugFreq_Days", DbType="Int")]
	public System.Nullable<int> DrugFreq_Days
	{
		get
		{
			return this._DrugFreq_Days;
		}
		set
		{
			if ((this._DrugFreq_Days != value))
			{
				this.OnDrugFreq_DaysChanging(value);
				this.SendPropertyChanging();
				this._DrugFreq_Days = value;
				this.SendPropertyChanged("DrugFreq_Days");
				this.OnDrugFreq_DaysChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugFrequencies_DrugSchedules", Storage="_DrugSchedules", ThisKey="DrugFreq_ID", OtherKey="DrugFreq_ID")]
	public EntitySet<DrugSchedules> DrugSchedules
	{
		get
		{
			return this._DrugSchedules;
		}
		set
		{
			this._DrugSchedules.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DrugSchedules(DrugSchedules entity)
	{
		this.SendPropertyChanging();
		entity.DrugFrequencies = this;
	}
	
	private void detach_DrugSchedules(DrugSchedules entity)
	{
		this.SendPropertyChanging();
		entity.DrugFrequencies = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugOverview")]
public partial class DrugOverview : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Drug_ID;
	
	private string _Drug_NameEN;
	
	private string _Drug_NameCH;
	
	private string _Drug_UnMass;
	
	private string _Drug_Usage;
	
	private string _Drug_Dosage;
	
	private string _Drug_App;
	
	private string _Drug_Indication;
	
	private string _Drug_SE;
	
	private string _Drug_WAC;
	
	private string _Drug_OIoS;
	
	private bool _Drug_SpD;
	
	private EntitySet<DrugSchedules> _DrugSchedules;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrug_IDChanging(int value);
    partial void OnDrug_IDChanged();
    partial void OnDrug_NameENChanging(string value);
    partial void OnDrug_NameENChanged();
    partial void OnDrug_NameCHChanging(string value);
    partial void OnDrug_NameCHChanged();
    partial void OnDrug_UnMassChanging(string value);
    partial void OnDrug_UnMassChanged();
    partial void OnDrug_UsageChanging(string value);
    partial void OnDrug_UsageChanged();
    partial void OnDrug_DosageChanging(string value);
    partial void OnDrug_DosageChanged();
    partial void OnDrug_AppChanging(string value);
    partial void OnDrug_AppChanged();
    partial void OnDrug_IndicationChanging(string value);
    partial void OnDrug_IndicationChanged();
    partial void OnDrug_SEChanging(string value);
    partial void OnDrug_SEChanged();
    partial void OnDrug_WACChanging(string value);
    partial void OnDrug_WACChanged();
    partial void OnDrug_OIoSChanging(string value);
    partial void OnDrug_OIoSChanged();
    partial void OnDrug_SpDChanging(bool value);
    partial void OnDrug_SpDChanged();
    #endregion
	
	public DrugOverview()
	{
		this._DrugSchedules = new EntitySet<DrugSchedules>(new Action<DrugSchedules>(this.attach_DrugSchedules), new Action<DrugSchedules>(this.detach_DrugSchedules));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Drug_ID
	{
		get
		{
			return this._Drug_ID;
		}
		set
		{
			if ((this._Drug_ID != value))
			{
				this.OnDrug_IDChanging(value);
				this.SendPropertyChanging();
				this._Drug_ID = value;
				this.SendPropertyChanged("Drug_ID");
				this.OnDrug_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_NameEN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Drug_NameEN
	{
		get
		{
			return this._Drug_NameEN;
		}
		set
		{
			if ((this._Drug_NameEN != value))
			{
				this.OnDrug_NameENChanging(value);
				this.SendPropertyChanging();
				this._Drug_NameEN = value;
				this.SendPropertyChanged("Drug_NameEN");
				this.OnDrug_NameENChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_NameCH", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Drug_NameCH
	{
		get
		{
			return this._Drug_NameCH;
		}
		set
		{
			if ((this._Drug_NameCH != value))
			{
				this.OnDrug_NameCHChanging(value);
				this.SendPropertyChanging();
				this._Drug_NameCH = value;
				this.SendPropertyChanged("Drug_NameCH");
				this.OnDrug_NameCHChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_UnMass", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Drug_UnMass
	{
		get
		{
			return this._Drug_UnMass;
		}
		set
		{
			if ((this._Drug_UnMass != value))
			{
				this.OnDrug_UnMassChanging(value);
				this.SendPropertyChanging();
				this._Drug_UnMass = value;
				this.SendPropertyChanged("Drug_UnMass");
				this.OnDrug_UnMassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_Usage", DbType="NVarChar(50)")]
	public string Drug_Usage
	{
		get
		{
			return this._Drug_Usage;
		}
		set
		{
			if ((this._Drug_Usage != value))
			{
				this.OnDrug_UsageChanging(value);
				this.SendPropertyChanging();
				this._Drug_Usage = value;
				this.SendPropertyChanged("Drug_Usage");
				this.OnDrug_UsageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_Dosage", DbType="NVarChar(10)")]
	public string Drug_Dosage
	{
		get
		{
			return this._Drug_Dosage;
		}
		set
		{
			if ((this._Drug_Dosage != value))
			{
				this.OnDrug_DosageChanging(value);
				this.SendPropertyChanging();
				this._Drug_Dosage = value;
				this.SendPropertyChanged("Drug_Dosage");
				this.OnDrug_DosageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_App", DbType="NVarChar(50)")]
	public string Drug_App
	{
		get
		{
			return this._Drug_App;
		}
		set
		{
			if ((this._Drug_App != value))
			{
				this.OnDrug_AppChanging(value);
				this.SendPropertyChanging();
				this._Drug_App = value;
				this.SendPropertyChanged("Drug_App");
				this.OnDrug_AppChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_Indication", DbType="NVarChar(50)")]
	public string Drug_Indication
	{
		get
		{
			return this._Drug_Indication;
		}
		set
		{
			if ((this._Drug_Indication != value))
			{
				this.OnDrug_IndicationChanging(value);
				this.SendPropertyChanging();
				this._Drug_Indication = value;
				this.SendPropertyChanged("Drug_Indication");
				this.OnDrug_IndicationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_SE", DbType="NVarChar(50)")]
	public string Drug_SE
	{
		get
		{
			return this._Drug_SE;
		}
		set
		{
			if ((this._Drug_SE != value))
			{
				this.OnDrug_SEChanging(value);
				this.SendPropertyChanging();
				this._Drug_SE = value;
				this.SendPropertyChanged("Drug_SE");
				this.OnDrug_SEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_WAC", DbType="NVarChar(50)")]
	public string Drug_WAC
	{
		get
		{
			return this._Drug_WAC;
		}
		set
		{
			if ((this._Drug_WAC != value))
			{
				this.OnDrug_WACChanging(value);
				this.SendPropertyChanging();
				this._Drug_WAC = value;
				this.SendPropertyChanged("Drug_WAC");
				this.OnDrug_WACChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_OIoS", DbType="NVarChar(50)")]
	public string Drug_OIoS
	{
		get
		{
			return this._Drug_OIoS;
		}
		set
		{
			if ((this._Drug_OIoS != value))
			{
				this.OnDrug_OIoSChanging(value);
				this.SendPropertyChanging();
				this._Drug_OIoS = value;
				this.SendPropertyChanged("Drug_OIoS");
				this.OnDrug_OIoSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_SpD", DbType="Bit NOT NULL")]
	public bool Drug_SpD
	{
		get
		{
			return this._Drug_SpD;
		}
		set
		{
			if ((this._Drug_SpD != value))
			{
				this.OnDrug_SpDChanging(value);
				this.SendPropertyChanging();
				this._Drug_SpD = value;
				this.SendPropertyChanged("Drug_SpD");
				this.OnDrug_SpDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugOverview_DrugSchedules", Storage="_DrugSchedules", ThisKey="Drug_ID", OtherKey="Drug_ID")]
	public EntitySet<DrugSchedules> DrugSchedules
	{
		get
		{
			return this._DrugSchedules;
		}
		set
		{
			this._DrugSchedules.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DrugSchedules(DrugSchedules entity)
	{
		this.SendPropertyChanging();
		entity.DrugOverview = this;
	}
	
	private void detach_DrugSchedules(DrugSchedules entity)
	{
		this.SendPropertyChanging();
		entity.DrugOverview = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugSchedules")]
public partial class DrugSchedules : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DrugSch_ID;
	
	private System.Nullable<int> _Diag_ID;
	
	private System.Nullable<int> _Drug_ID;
	
	private int _DrugFreq_ID;
	
	private System.DateTime _DrugSch_SD;
	
	private System.Nullable<System.DateTime> _DrugSch_ED;
	
	private string _DrugSch_Rem;
	
	private bool _DrugSch_Cls;
	
	private string _DrugSch_ClsRsn;
	
	private EntitySet<DrugCalendar> _DrugCalendar;
	
	private EntityRef<Diagnosis> _Diagnosis;
	
	private EntityRef<DrugFrequencies> _DrugFrequencies;
	
	private EntityRef<DrugOverview> _DrugOverview;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDrugSch_IDChanging(int value);
    partial void OnDrugSch_IDChanged();
    partial void OnDiag_IDChanging(System.Nullable<int> value);
    partial void OnDiag_IDChanged();
    partial void OnDrug_IDChanging(System.Nullable<int> value);
    partial void OnDrug_IDChanged();
    partial void OnDrugFreq_IDChanging(int value);
    partial void OnDrugFreq_IDChanged();
    partial void OnDrugSch_SDChanging(System.DateTime value);
    partial void OnDrugSch_SDChanged();
    partial void OnDrugSch_EDChanging(System.Nullable<System.DateTime> value);
    partial void OnDrugSch_EDChanged();
    partial void OnDrugSch_RemChanging(string value);
    partial void OnDrugSch_RemChanged();
    partial void OnDrugSch_ClsChanging(bool value);
    partial void OnDrugSch_ClsChanged();
    partial void OnDrugSch_ClsRsnChanging(string value);
    partial void OnDrugSch_ClsRsnChanged();
    #endregion
	
	public DrugSchedules()
	{
		this._DrugCalendar = new EntitySet<DrugCalendar>(new Action<DrugCalendar>(this.attach_DrugCalendar), new Action<DrugCalendar>(this.detach_DrugCalendar));
		this._Diagnosis = default(EntityRef<Diagnosis>);
		this._DrugFrequencies = default(EntityRef<DrugFrequencies>);
		this._DrugOverview = default(EntityRef<DrugOverview>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSch_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DrugSch_ID
	{
		get
		{
			return this._DrugSch_ID;
		}
		set
		{
			if ((this._DrugSch_ID != value))
			{
				this.OnDrugSch_IDChanging(value);
				this.SendPropertyChanging();
				this._DrugSch_ID = value;
				this.SendPropertyChanged("DrugSch_ID");
				this.OnDrugSch_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diag_ID", DbType="Int")]
	public System.Nullable<int> Diag_ID
	{
		get
		{
			return this._Diag_ID;
		}
		set
		{
			if ((this._Diag_ID != value))
			{
				if (this._Diagnosis.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDiag_IDChanging(value);
				this.SendPropertyChanging();
				this._Diag_ID = value;
				this.SendPropertyChanged("Diag_ID");
				this.OnDiag_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_ID", DbType="Int")]
	public System.Nullable<int> Drug_ID
	{
		get
		{
			return this._Drug_ID;
		}
		set
		{
			if ((this._Drug_ID != value))
			{
				if (this._DrugOverview.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDrug_IDChanging(value);
				this.SendPropertyChanging();
				this._Drug_ID = value;
				this.SendPropertyChanged("Drug_ID");
				this.OnDrug_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugFreq_ID", DbType="Int NOT NULL")]
	public int DrugFreq_ID
	{
		get
		{
			return this._DrugFreq_ID;
		}
		set
		{
			if ((this._DrugFreq_ID != value))
			{
				if (this._DrugFrequencies.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDrugFreq_IDChanging(value);
				this.SendPropertyChanging();
				this._DrugFreq_ID = value;
				this.SendPropertyChanged("DrugFreq_ID");
				this.OnDrugFreq_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSch_SD", DbType="Date NOT NULL")]
	public System.DateTime DrugSch_SD
	{
		get
		{
			return this._DrugSch_SD;
		}
		set
		{
			if ((this._DrugSch_SD != value))
			{
				this.OnDrugSch_SDChanging(value);
				this.SendPropertyChanging();
				this._DrugSch_SD = value;
				this.SendPropertyChanged("DrugSch_SD");
				this.OnDrugSch_SDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSch_ED", DbType="Date")]
	public System.Nullable<System.DateTime> DrugSch_ED
	{
		get
		{
			return this._DrugSch_ED;
		}
		set
		{
			if ((this._DrugSch_ED != value))
			{
				this.OnDrugSch_EDChanging(value);
				this.SendPropertyChanging();
				this._DrugSch_ED = value;
				this.SendPropertyChanged("DrugSch_ED");
				this.OnDrugSch_EDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSch_Rem", DbType="NVarChar(MAX)")]
	public string DrugSch_Rem
	{
		get
		{
			return this._DrugSch_Rem;
		}
		set
		{
			if ((this._DrugSch_Rem != value))
			{
				this.OnDrugSch_RemChanging(value);
				this.SendPropertyChanging();
				this._DrugSch_Rem = value;
				this.SendPropertyChanged("DrugSch_Rem");
				this.OnDrugSch_RemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSch_Cls", DbType="Bit NOT NULL")]
	public bool DrugSch_Cls
	{
		get
		{
			return this._DrugSch_Cls;
		}
		set
		{
			if ((this._DrugSch_Cls != value))
			{
				this.OnDrugSch_ClsChanging(value);
				this.SendPropertyChanging();
				this._DrugSch_Cls = value;
				this.SendPropertyChanged("DrugSch_Cls");
				this.OnDrugSch_ClsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugSch_ClsRsn", DbType="NVarChar(MAX)")]
	public string DrugSch_ClsRsn
	{
		get
		{
			return this._DrugSch_ClsRsn;
		}
		set
		{
			if ((this._DrugSch_ClsRsn != value))
			{
				this.OnDrugSch_ClsRsnChanging(value);
				this.SendPropertyChanging();
				this._DrugSch_ClsRsn = value;
				this.SendPropertyChanged("DrugSch_ClsRsn");
				this.OnDrugSch_ClsRsnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugSchedules_DrugCalendar", Storage="_DrugCalendar", ThisKey="DrugSch_ID", OtherKey="DrugSch_ID")]
	public EntitySet<DrugCalendar> DrugCalendar
	{
		get
		{
			return this._DrugCalendar;
		}
		set
		{
			this._DrugCalendar.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosis_DrugSchedules", Storage="_Diagnosis", ThisKey="Diag_ID", OtherKey="Diag_ID", IsForeignKey=true, DeleteRule="CASCADE")]
	public Diagnosis Diagnosis
	{
		get
		{
			return this._Diagnosis.Entity;
		}
		set
		{
			Diagnosis previousValue = this._Diagnosis.Entity;
			if (((previousValue != value) 
						|| (this._Diagnosis.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Diagnosis.Entity = null;
					previousValue.DrugSchedules.Remove(this);
				}
				this._Diagnosis.Entity = value;
				if ((value != null))
				{
					value.DrugSchedules.Add(this);
					this._Diag_ID = value.Diag_ID;
				}
				else
				{
					this._Diag_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Diagnosis");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugFrequencies_DrugSchedules", Storage="_DrugFrequencies", ThisKey="DrugFreq_ID", OtherKey="DrugFreq_ID", IsForeignKey=true)]
	public DrugFrequencies DrugFrequencies
	{
		get
		{
			return this._DrugFrequencies.Entity;
		}
		set
		{
			DrugFrequencies previousValue = this._DrugFrequencies.Entity;
			if (((previousValue != value) 
						|| (this._DrugFrequencies.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DrugFrequencies.Entity = null;
					previousValue.DrugSchedules.Remove(this);
				}
				this._DrugFrequencies.Entity = value;
				if ((value != null))
				{
					value.DrugSchedules.Add(this);
					this._DrugFreq_ID = value.DrugFreq_ID;
				}
				else
				{
					this._DrugFreq_ID = default(int);
				}
				this.SendPropertyChanged("DrugFrequencies");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugOverview_DrugSchedules", Storage="_DrugOverview", ThisKey="Drug_ID", OtherKey="Drug_ID", IsForeignKey=true)]
	public DrugOverview DrugOverview
	{
		get
		{
			return this._DrugOverview.Entity;
		}
		set
		{
			DrugOverview previousValue = this._DrugOverview.Entity;
			if (((previousValue != value) 
						|| (this._DrugOverview.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DrugOverview.Entity = null;
					previousValue.DrugSchedules.Remove(this);
				}
				this._DrugOverview.Entity = value;
				if ((value != null))
				{
					value.DrugSchedules.Add(this);
					this._Drug_ID = value.Drug_ID;
				}
				else
				{
					this._Drug_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("DrugOverview");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DrugCalendar(DrugCalendar entity)
	{
		this.SendPropertyChanging();
		entity.DrugSchedules = this;
	}
	
	private void detach_DrugCalendar(DrugCalendar entity)
	{
		this.SendPropertyChanging();
		entity.DrugSchedules = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Eva_ID;
	
	private int _Staff_ID;
	
	private int _Ptt_ID;
	
	private int _Diag_ID;
	
	private System.Nullable<int> _Eva_Sco;
	
	private string _Eva_Com;
	
	private string _Eva_Rlt;
	
	private EntityRef<Diagnosis> _Diagnosis;
	
	private EntityRef<Patients> _Patients;
	
	private EntityRef<Staffs> _Staffs;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEva_IDChanging(int value);
    partial void OnEva_IDChanged();
    partial void OnStaff_IDChanging(int value);
    partial void OnStaff_IDChanged();
    partial void OnPtt_IDChanging(int value);
    partial void OnPtt_IDChanged();
    partial void OnDiag_IDChanging(int value);
    partial void OnDiag_IDChanged();
    partial void OnEva_ScoChanging(System.Nullable<int> value);
    partial void OnEva_ScoChanged();
    partial void OnEva_ComChanging(string value);
    partial void OnEva_ComChanged();
    partial void OnEva_RltChanging(string value);
    partial void OnEva_RltChanged();
    #endregion
	
	public Evaluation()
	{
		this._Diagnosis = default(EntityRef<Diagnosis>);
		this._Patients = default(EntityRef<Patients>);
		this._Staffs = default(EntityRef<Staffs>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eva_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Eva_ID
	{
		get
		{
			return this._Eva_ID;
		}
		set
		{
			if ((this._Eva_ID != value))
			{
				this.OnEva_IDChanging(value);
				this.SendPropertyChanging();
				this._Eva_ID = value;
				this.SendPropertyChanged("Eva_ID");
				this.OnEva_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="Int NOT NULL")]
	public int Staff_ID
	{
		get
		{
			return this._Staff_ID;
		}
		set
		{
			if ((this._Staff_ID != value))
			{
				if (this._Staffs.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStaff_IDChanging(value);
				this.SendPropertyChanging();
				this._Staff_ID = value;
				this.SendPropertyChanged("Staff_ID");
				this.OnStaff_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_ID", DbType="Int NOT NULL")]
	public int Ptt_ID
	{
		get
		{
			return this._Ptt_ID;
		}
		set
		{
			if ((this._Ptt_ID != value))
			{
				if (this._Patients.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPtt_IDChanging(value);
				this.SendPropertyChanging();
				this._Ptt_ID = value;
				this.SendPropertyChanged("Ptt_ID");
				this.OnPtt_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diag_ID", DbType="Int NOT NULL")]
	public int Diag_ID
	{
		get
		{
			return this._Diag_ID;
		}
		set
		{
			if ((this._Diag_ID != value))
			{
				if (this._Diagnosis.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDiag_IDChanging(value);
				this.SendPropertyChanging();
				this._Diag_ID = value;
				this.SendPropertyChanged("Diag_ID");
				this.OnDiag_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eva_Sco", DbType="Int")]
	public System.Nullable<int> Eva_Sco
	{
		get
		{
			return this._Eva_Sco;
		}
		set
		{
			if ((this._Eva_Sco != value))
			{
				this.OnEva_ScoChanging(value);
				this.SendPropertyChanging();
				this._Eva_Sco = value;
				this.SendPropertyChanged("Eva_Sco");
				this.OnEva_ScoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eva_Com", DbType="NVarChar(MAX)")]
	public string Eva_Com
	{
		get
		{
			return this._Eva_Com;
		}
		set
		{
			if ((this._Eva_Com != value))
			{
				this.OnEva_ComChanging(value);
				this.SendPropertyChanging();
				this._Eva_Com = value;
				this.SendPropertyChanged("Eva_Com");
				this.OnEva_ComChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eva_Rlt", DbType="NVarChar(MAX)")]
	public string Eva_Rlt
	{
		get
		{
			return this._Eva_Rlt;
		}
		set
		{
			if ((this._Eva_Rlt != value))
			{
				this.OnEva_RltChanging(value);
				this.SendPropertyChanging();
				this._Eva_Rlt = value;
				this.SendPropertyChanged("Eva_Rlt");
				this.OnEva_RltChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosis_Evaluation", Storage="_Diagnosis", ThisKey="Diag_ID", OtherKey="Diag_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Diagnosis Diagnosis
	{
		get
		{
			return this._Diagnosis.Entity;
		}
		set
		{
			Diagnosis previousValue = this._Diagnosis.Entity;
			if (((previousValue != value) 
						|| (this._Diagnosis.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Diagnosis.Entity = null;
					previousValue.Evaluation.Remove(this);
				}
				this._Diagnosis.Entity = value;
				if ((value != null))
				{
					value.Evaluation.Add(this);
					this._Diag_ID = value.Diag_ID;
				}
				else
				{
					this._Diag_ID = default(int);
				}
				this.SendPropertyChanged("Diagnosis");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_Evaluation", Storage="_Patients", ThisKey="Ptt_ID", OtherKey="Ptt_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Patients Patients
	{
		get
		{
			return this._Patients.Entity;
		}
		set
		{
			Patients previousValue = this._Patients.Entity;
			if (((previousValue != value) 
						|| (this._Patients.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patients.Entity = null;
					previousValue.Evaluation.Remove(this);
				}
				this._Patients.Entity = value;
				if ((value != null))
				{
					value.Evaluation.Add(this);
					this._Ptt_ID = value.Ptt_ID;
				}
				else
				{
					this._Ptt_ID = default(int);
				}
				this.SendPropertyChanged("Patients");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_Evaluation", Storage="_Staffs", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
	public Staffs Staffs
	{
		get
		{
			return this._Staffs.Entity;
		}
		set
		{
			Staffs previousValue = this._Staffs.Entity;
			if (((previousValue != value) 
						|| (this._Staffs.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Staffs.Entity = null;
					previousValue.Evaluation.Remove(this);
				}
				this._Staffs.Entity = value;
				if ((value != null))
				{
					value.Evaluation.Add(this);
					this._Staff_ID = value.Staff_ID;
				}
				else
				{
					this._Staff_ID = default(int);
				}
				this.SendPropertyChanged("Staffs");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamCalendar")]
public partial class ExamCalendar : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ExamCal_ID;
	
	private int _ExamSch_ID;
	
	private int _Status_ID;
	
	private System.Nullable<int> _ExamCon_ID;
	
	private int _RmdDays_ID;
	
	private System.Nullable<int> _TI_ID;
	
	private System.DateTime _ExamSch_DoE;
	
	private string _ExamSch_Rlt;
	
	private string _ExamCal_Rem;
	
	private bool _ExamCal_Rmd;
	
	private EntityRef<WorkShifts> _WorkShifts;
	
	private EntityRef<ExamConsequences> _ExamConsequences;
	
	private EntityRef<ExamSchedules> _ExamSchedules;
	
	private EntityRef<RemindDays> _RemindDays;
	
	private EntityRef<Situations> _Situations;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamCal_IDChanging(int value);
    partial void OnExamCal_IDChanged();
    partial void OnExamSch_IDChanging(int value);
    partial void OnExamSch_IDChanged();
    partial void OnStatus_IDChanging(int value);
    partial void OnStatus_IDChanged();
    partial void OnExamCon_IDChanging(System.Nullable<int> value);
    partial void OnExamCon_IDChanged();
    partial void OnRmdDays_IDChanging(int value);
    partial void OnRmdDays_IDChanged();
    partial void OnTI_IDChanging(System.Nullable<int> value);
    partial void OnTI_IDChanged();
    partial void OnExamSch_DoEChanging(System.DateTime value);
    partial void OnExamSch_DoEChanged();
    partial void OnExamSch_RltChanging(string value);
    partial void OnExamSch_RltChanged();
    partial void OnExamCal_RemChanging(string value);
    partial void OnExamCal_RemChanged();
    partial void OnExamCal_RmdChanging(bool value);
    partial void OnExamCal_RmdChanged();
    #endregion
	
	public ExamCalendar()
	{
		this._WorkShifts = default(EntityRef<WorkShifts>);
		this._ExamConsequences = default(EntityRef<ExamConsequences>);
		this._ExamSchedules = default(EntityRef<ExamSchedules>);
		this._RemindDays = default(EntityRef<RemindDays>);
		this._Situations = default(EntityRef<Situations>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCal_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ExamCal_ID
	{
		get
		{
			return this._ExamCal_ID;
		}
		set
		{
			if ((this._ExamCal_ID != value))
			{
				this.OnExamCal_IDChanging(value);
				this.SendPropertyChanging();
				this._ExamCal_ID = value;
				this.SendPropertyChanged("ExamCal_ID");
				this.OnExamCal_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_ID", DbType="Int NOT NULL")]
	public int ExamSch_ID
	{
		get
		{
			return this._ExamSch_ID;
		}
		set
		{
			if ((this._ExamSch_ID != value))
			{
				if (this._ExamSchedules.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnExamSch_IDChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_ID = value;
				this.SendPropertyChanged("ExamSch_ID");
				this.OnExamSch_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", DbType="Int NOT NULL")]
	public int Status_ID
	{
		get
		{
			return this._Status_ID;
		}
		set
		{
			if ((this._Status_ID != value))
			{
				if (this._Situations.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatus_IDChanging(value);
				this.SendPropertyChanging();
				this._Status_ID = value;
				this.SendPropertyChanged("Status_ID");
				this.OnStatus_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCon_ID", DbType="Int")]
	public System.Nullable<int> ExamCon_ID
	{
		get
		{
			return this._ExamCon_ID;
		}
		set
		{
			if ((this._ExamCon_ID != value))
			{
				if (this._ExamConsequences.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnExamCon_IDChanging(value);
				this.SendPropertyChanging();
				this._ExamCon_ID = value;
				this.SendPropertyChanged("ExamCon_ID");
				this.OnExamCon_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RmdDays_ID", DbType="Int NOT NULL")]
	public int RmdDays_ID
	{
		get
		{
			return this._RmdDays_ID;
		}
		set
		{
			if ((this._RmdDays_ID != value))
			{
				if (this._RemindDays.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRmdDays_IDChanging(value);
				this.SendPropertyChanging();
				this._RmdDays_ID = value;
				this.SendPropertyChanged("RmdDays_ID");
				this.OnRmdDays_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TI_ID", DbType="Int")]
	public System.Nullable<int> TI_ID
	{
		get
		{
			return this._TI_ID;
		}
		set
		{
			if ((this._TI_ID != value))
			{
				if (this._WorkShifts.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTI_IDChanging(value);
				this.SendPropertyChanging();
				this._TI_ID = value;
				this.SendPropertyChanged("TI_ID");
				this.OnTI_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_DoE", DbType="Date NOT NULL")]
	public System.DateTime ExamSch_DoE
	{
		get
		{
			return this._ExamSch_DoE;
		}
		set
		{
			if ((this._ExamSch_DoE != value))
			{
				this.OnExamSch_DoEChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_DoE = value;
				this.SendPropertyChanged("ExamSch_DoE");
				this.OnExamSch_DoEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_Rlt", DbType="NVarChar(50)")]
	public string ExamSch_Rlt
	{
		get
		{
			return this._ExamSch_Rlt;
		}
		set
		{
			if ((this._ExamSch_Rlt != value))
			{
				this.OnExamSch_RltChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_Rlt = value;
				this.SendPropertyChanged("ExamSch_Rlt");
				this.OnExamSch_RltChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCal_Rem", DbType="NVarChar(MAX)")]
	public string ExamCal_Rem
	{
		get
		{
			return this._ExamCal_Rem;
		}
		set
		{
			if ((this._ExamCal_Rem != value))
			{
				this.OnExamCal_RemChanging(value);
				this.SendPropertyChanging();
				this._ExamCal_Rem = value;
				this.SendPropertyChanged("ExamCal_Rem");
				this.OnExamCal_RemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCal_Rmd", DbType="Bit NOT NULL")]
	public bool ExamCal_Rmd
	{
		get
		{
			return this._ExamCal_Rmd;
		}
		set
		{
			if ((this._ExamCal_Rmd != value))
			{
				this.OnExamCal_RmdChanging(value);
				this.SendPropertyChanging();
				this._ExamCal_Rmd = value;
				this.SendPropertyChanged("ExamCal_Rmd");
				this.OnExamCal_RmdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkShifts_ExamCalendar", Storage="_WorkShifts", ThisKey="TI_ID", OtherKey="TI_ID", IsForeignKey=true)]
	public WorkShifts WorkShifts
	{
		get
		{
			return this._WorkShifts.Entity;
		}
		set
		{
			WorkShifts previousValue = this._WorkShifts.Entity;
			if (((previousValue != value) 
						|| (this._WorkShifts.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkShifts.Entity = null;
					previousValue.ExamCalendar.Remove(this);
				}
				this._WorkShifts.Entity = value;
				if ((value != null))
				{
					value.ExamCalendar.Add(this);
					this._TI_ID = value.TI_ID;
				}
				else
				{
					this._TI_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("WorkShifts");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamConsequences_ExamCalendar", Storage="_ExamConsequences", ThisKey="ExamCon_ID", OtherKey="ExamCon_ID", IsForeignKey=true)]
	public ExamConsequences ExamConsequences
	{
		get
		{
			return this._ExamConsequences.Entity;
		}
		set
		{
			ExamConsequences previousValue = this._ExamConsequences.Entity;
			if (((previousValue != value) 
						|| (this._ExamConsequences.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ExamConsequences.Entity = null;
					previousValue.ExamCalendar.Remove(this);
				}
				this._ExamConsequences.Entity = value;
				if ((value != null))
				{
					value.ExamCalendar.Add(this);
					this._ExamCon_ID = value.ExamCon_ID;
				}
				else
				{
					this._ExamCon_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ExamConsequences");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamSchedules_ExamCalendar", Storage="_ExamSchedules", ThisKey="ExamSch_ID", OtherKey="ExamSch_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public ExamSchedules ExamSchedules
	{
		get
		{
			return this._ExamSchedules.Entity;
		}
		set
		{
			ExamSchedules previousValue = this._ExamSchedules.Entity;
			if (((previousValue != value) 
						|| (this._ExamSchedules.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ExamSchedules.Entity = null;
					previousValue.ExamCalendar.Remove(this);
				}
				this._ExamSchedules.Entity = value;
				if ((value != null))
				{
					value.ExamCalendar.Add(this);
					this._ExamSch_ID = value.ExamSch_ID;
				}
				else
				{
					this._ExamSch_ID = default(int);
				}
				this.SendPropertyChanged("ExamSchedules");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RemindDays_ExamCalendar", Storage="_RemindDays", ThisKey="RmdDays_ID", OtherKey="RmdDays_ID", IsForeignKey=true)]
	public RemindDays RemindDays
	{
		get
		{
			return this._RemindDays.Entity;
		}
		set
		{
			RemindDays previousValue = this._RemindDays.Entity;
			if (((previousValue != value) 
						|| (this._RemindDays.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._RemindDays.Entity = null;
					previousValue.ExamCalendar.Remove(this);
				}
				this._RemindDays.Entity = value;
				if ((value != null))
				{
					value.ExamCalendar.Add(this);
					this._RmdDays_ID = value.RmdDays_ID;
				}
				else
				{
					this._RmdDays_ID = default(int);
				}
				this.SendPropertyChanged("RemindDays");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Situations_ExamCalendar", Storage="_Situations", ThisKey="Status_ID", OtherKey="Status_ID", IsForeignKey=true)]
	public Situations Situations
	{
		get
		{
			return this._Situations.Entity;
		}
		set
		{
			Situations previousValue = this._Situations.Entity;
			if (((previousValue != value) 
						|| (this._Situations.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Situations.Entity = null;
					previousValue.ExamCalendar.Remove(this);
				}
				this._Situations.Entity = value;
				if ((value != null))
				{
					value.ExamCalendar.Add(this);
					this._Status_ID = value.Status_ID;
				}
				else
				{
					this._Status_ID = default(int);
				}
				this.SendPropertyChanged("Situations");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamCategories")]
public partial class ExamCategories : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ExamCat_ID;
	
	private string _ExamCat_Name;
	
	private EntitySet<ExamOverview> _ExamOverview;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamCat_IDChanging(int value);
    partial void OnExamCat_IDChanged();
    partial void OnExamCat_NameChanging(string value);
    partial void OnExamCat_NameChanged();
    #endregion
	
	public ExamCategories()
	{
		this._ExamOverview = new EntitySet<ExamOverview>(new Action<ExamOverview>(this.attach_ExamOverview), new Action<ExamOverview>(this.detach_ExamOverview));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCat_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ExamCat_ID
	{
		get
		{
			return this._ExamCat_ID;
		}
		set
		{
			if ((this._ExamCat_ID != value))
			{
				this.OnExamCat_IDChanging(value);
				this.SendPropertyChanging();
				this._ExamCat_ID = value;
				this.SendPropertyChanged("ExamCat_ID");
				this.OnExamCat_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCat_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string ExamCat_Name
	{
		get
		{
			return this._ExamCat_Name;
		}
		set
		{
			if ((this._ExamCat_Name != value))
			{
				this.OnExamCat_NameChanging(value);
				this.SendPropertyChanging();
				this._ExamCat_Name = value;
				this.SendPropertyChanged("ExamCat_Name");
				this.OnExamCat_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamCategories_ExamOverview", Storage="_ExamOverview", ThisKey="ExamCat_ID", OtherKey="ExamCat_ID")]
	public EntitySet<ExamOverview> ExamOverview
	{
		get
		{
			return this._ExamOverview;
		}
		set
		{
			this._ExamOverview.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ExamOverview(ExamOverview entity)
	{
		this.SendPropertyChanging();
		entity.ExamCategories = this;
	}
	
	private void detach_ExamOverview(ExamOverview entity)
	{
		this.SendPropertyChanging();
		entity.ExamCategories = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamConsequences")]
public partial class ExamConsequences : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ExamCon_ID;
	
	private string _ExamCon_CoC;
	
	private string _FoodSug;
	
	private EntitySet<ExamCalendar> _ExamCalendar;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamCon_IDChanging(int value);
    partial void OnExamCon_IDChanged();
    partial void OnExamCon_CoCChanging(string value);
    partial void OnExamCon_CoCChanged();
    partial void OnFoodSugChanging(string value);
    partial void OnFoodSugChanged();
    #endregion
	
	public ExamConsequences()
	{
		this._ExamCalendar = new EntitySet<ExamCalendar>(new Action<ExamCalendar>(this.attach_ExamCalendar), new Action<ExamCalendar>(this.detach_ExamCalendar));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCon_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ExamCon_ID
	{
		get
		{
			return this._ExamCon_ID;
		}
		set
		{
			if ((this._ExamCon_ID != value))
			{
				this.OnExamCon_IDChanging(value);
				this.SendPropertyChanging();
				this._ExamCon_ID = value;
				this.SendPropertyChanged("ExamCon_ID");
				this.OnExamCon_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCon_CoC", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ExamCon_CoC
	{
		get
		{
			return this._ExamCon_CoC;
		}
		set
		{
			if ((this._ExamCon_CoC != value))
			{
				this.OnExamCon_CoCChanging(value);
				this.SendPropertyChanging();
				this._ExamCon_CoC = value;
				this.SendPropertyChanged("ExamCon_CoC");
				this.OnExamCon_CoCChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodSug", DbType="NVarChar(50)")]
	public string FoodSug
	{
		get
		{
			return this._FoodSug;
		}
		set
		{
			if ((this._FoodSug != value))
			{
				this.OnFoodSugChanging(value);
				this.SendPropertyChanging();
				this._FoodSug = value;
				this.SendPropertyChanged("FoodSug");
				this.OnFoodSugChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamConsequences_ExamCalendar", Storage="_ExamCalendar", ThisKey="ExamCon_ID", OtherKey="ExamCon_ID")]
	public EntitySet<ExamCalendar> ExamCalendar
	{
		get
		{
			return this._ExamCalendar;
		}
		set
		{
			this._ExamCalendar.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.ExamConsequences = this;
	}
	
	private void detach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.ExamConsequences = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamFrequencies")]
public partial class ExamFrequencies : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ExamFreq_ID;
	
	private string _ExamFreq_EFC;
	
	private int _ExamFreq_Days;
	
	private EntitySet<ExamSchedules> _ExamSchedules;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamFreq_IDChanging(int value);
    partial void OnExamFreq_IDChanged();
    partial void OnExamFreq_EFCChanging(string value);
    partial void OnExamFreq_EFCChanged();
    partial void OnExamFreq_DaysChanging(int value);
    partial void OnExamFreq_DaysChanged();
    #endregion
	
	public ExamFrequencies()
	{
		this._ExamSchedules = new EntitySet<ExamSchedules>(new Action<ExamSchedules>(this.attach_ExamSchedules), new Action<ExamSchedules>(this.detach_ExamSchedules));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamFreq_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ExamFreq_ID
	{
		get
		{
			return this._ExamFreq_ID;
		}
		set
		{
			if ((this._ExamFreq_ID != value))
			{
				this.OnExamFreq_IDChanging(value);
				this.SendPropertyChanging();
				this._ExamFreq_ID = value;
				this.SendPropertyChanged("ExamFreq_ID");
				this.OnExamFreq_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamFreq_EFC", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ExamFreq_EFC
	{
		get
		{
			return this._ExamFreq_EFC;
		}
		set
		{
			if ((this._ExamFreq_EFC != value))
			{
				this.OnExamFreq_EFCChanging(value);
				this.SendPropertyChanging();
				this._ExamFreq_EFC = value;
				this.SendPropertyChanged("ExamFreq_EFC");
				this.OnExamFreq_EFCChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamFreq_Days", DbType="Int NOT NULL")]
	public int ExamFreq_Days
	{
		get
		{
			return this._ExamFreq_Days;
		}
		set
		{
			if ((this._ExamFreq_Days != value))
			{
				this.OnExamFreq_DaysChanging(value);
				this.SendPropertyChanging();
				this._ExamFreq_Days = value;
				this.SendPropertyChanged("ExamFreq_Days");
				this.OnExamFreq_DaysChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamFrequencies_ExamSchedules", Storage="_ExamSchedules", ThisKey="ExamFreq_ID", OtherKey="ExamFreq_EFC")]
	public EntitySet<ExamSchedules> ExamSchedules
	{
		get
		{
			return this._ExamSchedules;
		}
		set
		{
			this._ExamSchedules.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ExamSchedules(ExamSchedules entity)
	{
		this.SendPropertyChanging();
		entity.ExamFrequencies = this;
	}
	
	private void detach_ExamSchedules(ExamSchedules entity)
	{
		this.SendPropertyChanging();
		entity.ExamFrequencies = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamOverview")]
public partial class ExamOverview : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Exam_ID;
	
	private string _Exam_NameEN;
	
	private string _Exam_NameCH;
	
	private string _Exam_Sex;
	
	private string _Exam_Unit;
	
	private string _Exam_UpLim;
	
	private string _Exam_LowLim;
	
	private decimal _Exam_WarnPct;
	
	private int _ExamCat_ID;
	
	private EntitySet<ExamSchedules> _ExamSchedules;
	
	private EntityRef<ExamCategories> _ExamCategories;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExam_IDChanging(int value);
    partial void OnExam_IDChanged();
    partial void OnExam_NameENChanging(string value);
    partial void OnExam_NameENChanged();
    partial void OnExam_NameCHChanging(string value);
    partial void OnExam_NameCHChanged();
    partial void OnExam_SexChanging(string value);
    partial void OnExam_SexChanged();
    partial void OnExam_UnitChanging(string value);
    partial void OnExam_UnitChanged();
    partial void OnExam_UpLimChanging(string value);
    partial void OnExam_UpLimChanged();
    partial void OnExam_LowLimChanging(string value);
    partial void OnExam_LowLimChanged();
    partial void OnExam_WarnPctChanging(decimal value);
    partial void OnExam_WarnPctChanged();
    partial void OnExamCat_IDChanging(int value);
    partial void OnExamCat_IDChanged();
    #endregion
	
	public ExamOverview()
	{
		this._ExamSchedules = new EntitySet<ExamSchedules>(new Action<ExamSchedules>(this.attach_ExamSchedules), new Action<ExamSchedules>(this.detach_ExamSchedules));
		this._ExamCategories = default(EntityRef<ExamCategories>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Exam_ID
	{
		get
		{
			return this._Exam_ID;
		}
		set
		{
			if ((this._Exam_ID != value))
			{
				this.OnExam_IDChanging(value);
				this.SendPropertyChanging();
				this._Exam_ID = value;
				this.SendPropertyChanged("Exam_ID");
				this.OnExam_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_NameEN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Exam_NameEN
	{
		get
		{
			return this._Exam_NameEN;
		}
		set
		{
			if ((this._Exam_NameEN != value))
			{
				this.OnExam_NameENChanging(value);
				this.SendPropertyChanging();
				this._Exam_NameEN = value;
				this.SendPropertyChanged("Exam_NameEN");
				this.OnExam_NameENChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_NameCH", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Exam_NameCH
	{
		get
		{
			return this._Exam_NameCH;
		}
		set
		{
			if ((this._Exam_NameCH != value))
			{
				this.OnExam_NameCHChanging(value);
				this.SendPropertyChanging();
				this._Exam_NameCH = value;
				this.SendPropertyChanged("Exam_NameCH");
				this.OnExam_NameCHChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_Sex", DbType="NVarChar(1)")]
	public string Exam_Sex
	{
		get
		{
			return this._Exam_Sex;
		}
		set
		{
			if ((this._Exam_Sex != value))
			{
				this.OnExam_SexChanging(value);
				this.SendPropertyChanging();
				this._Exam_Sex = value;
				this.SendPropertyChanged("Exam_Sex");
				this.OnExam_SexChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_Unit", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Exam_Unit
	{
		get
		{
			return this._Exam_Unit;
		}
		set
		{
			if ((this._Exam_Unit != value))
			{
				this.OnExam_UnitChanging(value);
				this.SendPropertyChanging();
				this._Exam_Unit = value;
				this.SendPropertyChanged("Exam_Unit");
				this.OnExam_UnitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_UpLim", DbType="NVarChar(10)")]
	public string Exam_UpLim
	{
		get
		{
			return this._Exam_UpLim;
		}
		set
		{
			if ((this._Exam_UpLim != value))
			{
				this.OnExam_UpLimChanging(value);
				this.SendPropertyChanging();
				this._Exam_UpLim = value;
				this.SendPropertyChanged("Exam_UpLim");
				this.OnExam_UpLimChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_LowLim", DbType="NVarChar(10)")]
	public string Exam_LowLim
	{
		get
		{
			return this._Exam_LowLim;
		}
		set
		{
			if ((this._Exam_LowLim != value))
			{
				this.OnExam_LowLimChanging(value);
				this.SendPropertyChanging();
				this._Exam_LowLim = value;
				this.SendPropertyChanged("Exam_LowLim");
				this.OnExam_LowLimChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_WarnPct", DbType="Decimal(5,0) NOT NULL")]
	public decimal Exam_WarnPct
	{
		get
		{
			return this._Exam_WarnPct;
		}
		set
		{
			if ((this._Exam_WarnPct != value))
			{
				this.OnExam_WarnPctChanging(value);
				this.SendPropertyChanging();
				this._Exam_WarnPct = value;
				this.SendPropertyChanged("Exam_WarnPct");
				this.OnExam_WarnPctChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCat_ID", DbType="Int NOT NULL")]
	public int ExamCat_ID
	{
		get
		{
			return this._ExamCat_ID;
		}
		set
		{
			if ((this._ExamCat_ID != value))
			{
				if (this._ExamCategories.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnExamCat_IDChanging(value);
				this.SendPropertyChanging();
				this._ExamCat_ID = value;
				this.SendPropertyChanged("ExamCat_ID");
				this.OnExamCat_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamOverview_ExamSchedules", Storage="_ExamSchedules", ThisKey="Exam_ID", OtherKey="Exam_ID")]
	public EntitySet<ExamSchedules> ExamSchedules
	{
		get
		{
			return this._ExamSchedules;
		}
		set
		{
			this._ExamSchedules.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamCategories_ExamOverview", Storage="_ExamCategories", ThisKey="ExamCat_ID", OtherKey="ExamCat_ID", IsForeignKey=true)]
	public ExamCategories ExamCategories
	{
		get
		{
			return this._ExamCategories.Entity;
		}
		set
		{
			ExamCategories previousValue = this._ExamCategories.Entity;
			if (((previousValue != value) 
						|| (this._ExamCategories.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ExamCategories.Entity = null;
					previousValue.ExamOverview.Remove(this);
				}
				this._ExamCategories.Entity = value;
				if ((value != null))
				{
					value.ExamOverview.Add(this);
					this._ExamCat_ID = value.ExamCat_ID;
				}
				else
				{
					this._ExamCat_ID = default(int);
				}
				this.SendPropertyChanged("ExamCategories");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ExamSchedules(ExamSchedules entity)
	{
		this.SendPropertyChanging();
		entity.ExamOverview = this;
	}
	
	private void detach_ExamSchedules(ExamSchedules entity)
	{
		this.SendPropertyChanging();
		entity.ExamOverview = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamSchedules")]
public partial class ExamSchedules : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ExamSch_ID;
	
	private System.Nullable<int> _Diag_ID;
	
	private System.Nullable<int> _Exam_ID;
	
	private int _ExamFreq_EFC;
	
	private System.DateTime _ExamSch_SD;
	
	private System.Nullable<System.DateTime> _ExamSch_ED;
	
	private string _ExamSch_Rem;
	
	private bool _ExamSch_Cls;
	
	private string _ExamSch_ClsRsn;
	
	private EntitySet<ExamCalendar> _ExamCalendar;
	
	private EntityRef<Diagnosis> _Diagnosis;
	
	private EntityRef<ExamOverview> _ExamOverview;
	
	private EntityRef<ExamFrequencies> _ExamFrequencies;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamSch_IDChanging(int value);
    partial void OnExamSch_IDChanged();
    partial void OnDiag_IDChanging(System.Nullable<int> value);
    partial void OnDiag_IDChanged();
    partial void OnExam_IDChanging(System.Nullable<int> value);
    partial void OnExam_IDChanged();
    partial void OnExamFreq_EFCChanging(int value);
    partial void OnExamFreq_EFCChanged();
    partial void OnExamSch_SDChanging(System.DateTime value);
    partial void OnExamSch_SDChanged();
    partial void OnExamSch_EDChanging(System.Nullable<System.DateTime> value);
    partial void OnExamSch_EDChanged();
    partial void OnExamSch_RemChanging(string value);
    partial void OnExamSch_RemChanged();
    partial void OnExamSch_ClsChanging(bool value);
    partial void OnExamSch_ClsChanged();
    partial void OnExamSch_ClsRsnChanging(string value);
    partial void OnExamSch_ClsRsnChanged();
    #endregion
	
	public ExamSchedules()
	{
		this._ExamCalendar = new EntitySet<ExamCalendar>(new Action<ExamCalendar>(this.attach_ExamCalendar), new Action<ExamCalendar>(this.detach_ExamCalendar));
		this._Diagnosis = default(EntityRef<Diagnosis>);
		this._ExamOverview = default(EntityRef<ExamOverview>);
		this._ExamFrequencies = default(EntityRef<ExamFrequencies>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ExamSch_ID
	{
		get
		{
			return this._ExamSch_ID;
		}
		set
		{
			if ((this._ExamSch_ID != value))
			{
				this.OnExamSch_IDChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_ID = value;
				this.SendPropertyChanged("ExamSch_ID");
				this.OnExamSch_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diag_ID", DbType="Int")]
	public System.Nullable<int> Diag_ID
	{
		get
		{
			return this._Diag_ID;
		}
		set
		{
			if ((this._Diag_ID != value))
			{
				if (this._Diagnosis.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDiag_IDChanging(value);
				this.SendPropertyChanging();
				this._Diag_ID = value;
				this.SendPropertyChanged("Diag_ID");
				this.OnDiag_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exam_ID", DbType="Int")]
	public System.Nullable<int> Exam_ID
	{
		get
		{
			return this._Exam_ID;
		}
		set
		{
			if ((this._Exam_ID != value))
			{
				if (this._ExamOverview.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnExam_IDChanging(value);
				this.SendPropertyChanging();
				this._Exam_ID = value;
				this.SendPropertyChanged("Exam_ID");
				this.OnExam_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamFreq_EFC", DbType="Int NOT NULL")]
	public int ExamFreq_EFC
	{
		get
		{
			return this._ExamFreq_EFC;
		}
		set
		{
			if ((this._ExamFreq_EFC != value))
			{
				if (this._ExamFrequencies.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnExamFreq_EFCChanging(value);
				this.SendPropertyChanging();
				this._ExamFreq_EFC = value;
				this.SendPropertyChanged("ExamFreq_EFC");
				this.OnExamFreq_EFCChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_SD", DbType="Date NOT NULL")]
	public System.DateTime ExamSch_SD
	{
		get
		{
			return this._ExamSch_SD;
		}
		set
		{
			if ((this._ExamSch_SD != value))
			{
				this.OnExamSch_SDChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_SD = value;
				this.SendPropertyChanged("ExamSch_SD");
				this.OnExamSch_SDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_ED", DbType="Date")]
	public System.Nullable<System.DateTime> ExamSch_ED
	{
		get
		{
			return this._ExamSch_ED;
		}
		set
		{
			if ((this._ExamSch_ED != value))
			{
				this.OnExamSch_EDChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_ED = value;
				this.SendPropertyChanged("ExamSch_ED");
				this.OnExamSch_EDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_Rem", DbType="NVarChar(MAX)")]
	public string ExamSch_Rem
	{
		get
		{
			return this._ExamSch_Rem;
		}
		set
		{
			if ((this._ExamSch_Rem != value))
			{
				this.OnExamSch_RemChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_Rem = value;
				this.SendPropertyChanged("ExamSch_Rem");
				this.OnExamSch_RemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_Cls", DbType="Bit NOT NULL")]
	public bool ExamSch_Cls
	{
		get
		{
			return this._ExamSch_Cls;
		}
		set
		{
			if ((this._ExamSch_Cls != value))
			{
				this.OnExamSch_ClsChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_Cls = value;
				this.SendPropertyChanged("ExamSch_Cls");
				this.OnExamSch_ClsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamSch_ClsRsn", DbType="NVarChar(MAX)")]
	public string ExamSch_ClsRsn
	{
		get
		{
			return this._ExamSch_ClsRsn;
		}
		set
		{
			if ((this._ExamSch_ClsRsn != value))
			{
				this.OnExamSch_ClsRsnChanging(value);
				this.SendPropertyChanging();
				this._ExamSch_ClsRsn = value;
				this.SendPropertyChanged("ExamSch_ClsRsn");
				this.OnExamSch_ClsRsnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamSchedules_ExamCalendar", Storage="_ExamCalendar", ThisKey="ExamSch_ID", OtherKey="ExamSch_ID")]
	public EntitySet<ExamCalendar> ExamCalendar
	{
		get
		{
			return this._ExamCalendar;
		}
		set
		{
			this._ExamCalendar.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosis_ExamSchedules", Storage="_Diagnosis", ThisKey="Diag_ID", OtherKey="Diag_ID", IsForeignKey=true, DeleteRule="CASCADE")]
	public Diagnosis Diagnosis
	{
		get
		{
			return this._Diagnosis.Entity;
		}
		set
		{
			Diagnosis previousValue = this._Diagnosis.Entity;
			if (((previousValue != value) 
						|| (this._Diagnosis.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Diagnosis.Entity = null;
					previousValue.ExamSchedules.Remove(this);
				}
				this._Diagnosis.Entity = value;
				if ((value != null))
				{
					value.ExamSchedules.Add(this);
					this._Diag_ID = value.Diag_ID;
				}
				else
				{
					this._Diag_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Diagnosis");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamOverview_ExamSchedules", Storage="_ExamOverview", ThisKey="Exam_ID", OtherKey="Exam_ID", IsForeignKey=true)]
	public ExamOverview ExamOverview
	{
		get
		{
			return this._ExamOverview.Entity;
		}
		set
		{
			ExamOverview previousValue = this._ExamOverview.Entity;
			if (((previousValue != value) 
						|| (this._ExamOverview.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ExamOverview.Entity = null;
					previousValue.ExamSchedules.Remove(this);
				}
				this._ExamOverview.Entity = value;
				if ((value != null))
				{
					value.ExamSchedules.Add(this);
					this._Exam_ID = value.Exam_ID;
				}
				else
				{
					this._Exam_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ExamOverview");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamFrequencies_ExamSchedules", Storage="_ExamFrequencies", ThisKey="ExamFreq_EFC", OtherKey="ExamFreq_ID", IsForeignKey=true)]
	public ExamFrequencies ExamFrequencies
	{
		get
		{
			return this._ExamFrequencies.Entity;
		}
		set
		{
			ExamFrequencies previousValue = this._ExamFrequencies.Entity;
			if (((previousValue != value) 
						|| (this._ExamFrequencies.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ExamFrequencies.Entity = null;
					previousValue.ExamSchedules.Remove(this);
				}
				this._ExamFrequencies.Entity = value;
				if ((value != null))
				{
					value.ExamSchedules.Add(this);
					this._ExamFreq_EFC = value.ExamFreq_ID;
				}
				else
				{
					this._ExamFreq_EFC = default(int);
				}
				this.SendPropertyChanged("ExamFrequencies");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.ExamSchedules = this;
	}
	
	private void detach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.ExamSchedules = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forms")]
public partial class Forms : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Frm_ID;
	
	private string _Frm_NameCH;
	
	private string _Frm_NameEN;
	
	private EntitySet<UseRecords> _UseRecords;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFrm_IDChanging(int value);
    partial void OnFrm_IDChanged();
    partial void OnFrm_NameCHChanging(string value);
    partial void OnFrm_NameCHChanged();
    partial void OnFrm_NameENChanging(string value);
    partial void OnFrm_NameENChanged();
    #endregion
	
	public Forms()
	{
		this._UseRecords = new EntitySet<UseRecords>(new Action<UseRecords>(this.attach_UseRecords), new Action<UseRecords>(this.detach_UseRecords));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frm_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Frm_ID
	{
		get
		{
			return this._Frm_ID;
		}
		set
		{
			if ((this._Frm_ID != value))
			{
				this.OnFrm_IDChanging(value);
				this.SendPropertyChanging();
				this._Frm_ID = value;
				this.SendPropertyChanged("Frm_ID");
				this.OnFrm_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frm_NameCH", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Frm_NameCH
	{
		get
		{
			return this._Frm_NameCH;
		}
		set
		{
			if ((this._Frm_NameCH != value))
			{
				this.OnFrm_NameCHChanging(value);
				this.SendPropertyChanging();
				this._Frm_NameCH = value;
				this.SendPropertyChanged("Frm_NameCH");
				this.OnFrm_NameCHChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frm_NameEN", DbType="NVarChar(50)")]
	public string Frm_NameEN
	{
		get
		{
			return this._Frm_NameEN;
		}
		set
		{
			if ((this._Frm_NameEN != value))
			{
				this.OnFrm_NameENChanging(value);
				this.SendPropertyChanging();
				this._Frm_NameEN = value;
				this.SendPropertyChanged("Frm_NameEN");
				this.OnFrm_NameENChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forms_UseRecords", Storage="_UseRecords", ThisKey="Frm_ID", OtherKey="Frm_ID")]
	public EntitySet<UseRecords> UseRecords
	{
		get
		{
			return this._UseRecords;
		}
		set
		{
			this._UseRecords.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UseRecords(UseRecords entity)
	{
		this.SendPropertyChanging();
		entity.Forms = this;
	}
	
	private void detach_UseRecords(UseRecords entity)
	{
		this.SendPropertyChanging();
		entity.Forms = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthKnowledge")]
public partial class HealthKnowledge : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Health_ID;
	
	private string _Health_Type;
	
	private string _Health_Title;
	
	private string _Health_Cont;
	
	private System.Data.Linq.Binary _Health_img;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHealth_IDChanging(int value);
    partial void OnHealth_IDChanged();
    partial void OnHealth_TypeChanging(string value);
    partial void OnHealth_TypeChanged();
    partial void OnHealth_TitleChanging(string value);
    partial void OnHealth_TitleChanged();
    partial void OnHealth_ContChanging(string value);
    partial void OnHealth_ContChanged();
    partial void OnHealth_imgChanging(System.Data.Linq.Binary value);
    partial void OnHealth_imgChanged();
    #endregion
	
	public HealthKnowledge()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Health_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Health_ID
	{
		get
		{
			return this._Health_ID;
		}
		set
		{
			if ((this._Health_ID != value))
			{
				this.OnHealth_IDChanging(value);
				this.SendPropertyChanging();
				this._Health_ID = value;
				this.SendPropertyChanged("Health_ID");
				this.OnHealth_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Health_Type", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Health_Type
	{
		get
		{
			return this._Health_Type;
		}
		set
		{
			if ((this._Health_Type != value))
			{
				this.OnHealth_TypeChanging(value);
				this.SendPropertyChanging();
				this._Health_Type = value;
				this.SendPropertyChanged("Health_Type");
				this.OnHealth_TypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Health_Title", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Health_Title
	{
		get
		{
			return this._Health_Title;
		}
		set
		{
			if ((this._Health_Title != value))
			{
				this.OnHealth_TitleChanging(value);
				this.SendPropertyChanging();
				this._Health_Title = value;
				this.SendPropertyChanged("Health_Title");
				this.OnHealth_TitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Health_Cont", DbType="NVarChar(MAX)")]
	public string Health_Cont
	{
		get
		{
			return this._Health_Cont;
		}
		set
		{
			if ((this._Health_Cont != value))
			{
				this.OnHealth_ContChanging(value);
				this.SendPropertyChanging();
				this._Health_Cont = value;
				this.SendPropertyChanged("Health_Cont");
				this.OnHealth_ContChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Health_img", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Health_img
	{
		get
		{
			return this._Health_img;
		}
		set
		{
			if ((this._Health_img != value))
			{
				this.OnHealth_imgChanging(value);
				this.SendPropertyChanging();
				this._Health_img = value;
				this.SendPropertyChanged("Health_img");
				this.OnHealth_imgChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobTitles")]
public partial class JobTitles : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Job_ID;
	
	private string _Job_Title;
	
	private EntitySet<Staffs> _Staffs;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJob_IDChanging(int value);
    partial void OnJob_IDChanged();
    partial void OnJob_TitleChanging(string value);
    partial void OnJob_TitleChanged();
    #endregion
	
	public JobTitles()
	{
		this._Staffs = new EntitySet<Staffs>(new Action<Staffs>(this.attach_Staffs), new Action<Staffs>(this.detach_Staffs));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Job_ID
	{
		get
		{
			return this._Job_ID;
		}
		set
		{
			if ((this._Job_ID != value))
			{
				this.OnJob_IDChanging(value);
				this.SendPropertyChanging();
				this._Job_ID = value;
				this.SendPropertyChanged("Job_ID");
				this.OnJob_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job_Title", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string Job_Title
	{
		get
		{
			return this._Job_Title;
		}
		set
		{
			if ((this._Job_Title != value))
			{
				this.OnJob_TitleChanging(value);
				this.SendPropertyChanging();
				this._Job_Title = value;
				this.SendPropertyChanged("Job_Title");
				this.OnJob_TitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobTitles_Staffs", Storage="_Staffs", ThisKey="Job_ID", OtherKey="Job_ID")]
	public EntitySet<Staffs> Staffs
	{
		get
		{
			return this._Staffs;
		}
		set
		{
			this._Staffs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Staffs(Staffs entity)
	{
		this.SendPropertyChanging();
		entity.JobTitles = this;
	}
	
	private void detach_Staffs(Staffs entity)
	{
		this.SendPropertyChanging();
		entity.JobTitles = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
public partial class News : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _News_ID;
	
	private string _News_Type;
	
	private string _News_Title;
	
	private string _News_Cont;
	
	private System.DateTime _News_Date;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNews_IDChanging(int value);
    partial void OnNews_IDChanged();
    partial void OnNews_TypeChanging(string value);
    partial void OnNews_TypeChanged();
    partial void OnNews_TitleChanging(string value);
    partial void OnNews_TitleChanged();
    partial void OnNews_ContChanging(string value);
    partial void OnNews_ContChanged();
    partial void OnNews_DateChanging(System.DateTime value);
    partial void OnNews_DateChanged();
    #endregion
	
	public News()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int News_ID
	{
		get
		{
			return this._News_ID;
		}
		set
		{
			if ((this._News_ID != value))
			{
				this.OnNews_IDChanging(value);
				this.SendPropertyChanging();
				this._News_ID = value;
				this.SendPropertyChanged("News_ID");
				this.OnNews_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string News_Type
	{
		get
		{
			return this._News_Type;
		}
		set
		{
			if ((this._News_Type != value))
			{
				this.OnNews_TypeChanging(value);
				this.SendPropertyChanging();
				this._News_Type = value;
				this.SendPropertyChanged("News_Type");
				this.OnNews_TypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string News_Title
	{
		get
		{
			return this._News_Title;
		}
		set
		{
			if ((this._News_Title != value))
			{
				this.OnNews_TitleChanging(value);
				this.SendPropertyChanging();
				this._News_Title = value;
				this.SendPropertyChanged("News_Title");
				this.OnNews_TitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_Cont", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string News_Cont
	{
		get
		{
			return this._News_Cont;
		}
		set
		{
			if ((this._News_Cont != value))
			{
				this.OnNews_ContChanging(value);
				this.SendPropertyChanging();
				this._News_Cont = value;
				this.SendPropertyChanged("News_Cont");
				this.OnNews_ContChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_Date", DbType="DateTime NOT NULL")]
	public System.DateTime News_Date
	{
		get
		{
			return this._News_Date;
		}
		set
		{
			if ((this._News_Date != value))
			{
				this.OnNews_DateChanging(value);
				this.SendPropertyChanging();
				this._News_Date = value;
				this.SendPropertyChanged("News_Date");
				this.OnNews_DateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OutpatientInformation")]
public partial class OutpatientInformation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OPI_ID;
	
	private string _OPI_RN;
	
	private System.DateTime _OPI_Date;
	
	private int _TI_ID;
	
	private EntitySet<RegisterInformation> _RegisterInformation;
	
	private EntityRef<WorkShifts> _WorkShifts;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOPI_IDChanging(int value);
    partial void OnOPI_IDChanged();
    partial void OnOPI_RNChanging(string value);
    partial void OnOPI_RNChanged();
    partial void OnOPI_DateChanging(System.DateTime value);
    partial void OnOPI_DateChanged();
    partial void OnTI_IDChanging(int value);
    partial void OnTI_IDChanged();
    #endregion
	
	public OutpatientInformation()
	{
		this._RegisterInformation = new EntitySet<RegisterInformation>(new Action<RegisterInformation>(this.attach_RegisterInformation), new Action<RegisterInformation>(this.detach_RegisterInformation));
		this._WorkShifts = default(EntityRef<WorkShifts>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPI_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OPI_ID
	{
		get
		{
			return this._OPI_ID;
		}
		set
		{
			if ((this._OPI_ID != value))
			{
				this.OnOPI_IDChanging(value);
				this.SendPropertyChanging();
				this._OPI_ID = value;
				this.SendPropertyChanged("OPI_ID");
				this.OnOPI_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPI_RN", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string OPI_RN
	{
		get
		{
			return this._OPI_RN;
		}
		set
		{
			if ((this._OPI_RN != value))
			{
				this.OnOPI_RNChanging(value);
				this.SendPropertyChanging();
				this._OPI_RN = value;
				this.SendPropertyChanged("OPI_RN");
				this.OnOPI_RNChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPI_Date", DbType="Date NOT NULL")]
	public System.DateTime OPI_Date
	{
		get
		{
			return this._OPI_Date;
		}
		set
		{
			if ((this._OPI_Date != value))
			{
				this.OnOPI_DateChanging(value);
				this.SendPropertyChanging();
				this._OPI_Date = value;
				this.SendPropertyChanged("OPI_Date");
				this.OnOPI_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TI_ID", DbType="Int NOT NULL")]
	public int TI_ID
	{
		get
		{
			return this._TI_ID;
		}
		set
		{
			if ((this._TI_ID != value))
			{
				if (this._WorkShifts.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTI_IDChanging(value);
				this.SendPropertyChanging();
				this._TI_ID = value;
				this.SendPropertyChanged("TI_ID");
				this.OnTI_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutpatientInformation_RegisterInformation", Storage="_RegisterInformation", ThisKey="OPI_ID", OtherKey="OPI_ID")]
	public EntitySet<RegisterInformation> RegisterInformation
	{
		get
		{
			return this._RegisterInformation;
		}
		set
		{
			this._RegisterInformation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WorkShifts_OutpatientInformation", Storage="_WorkShifts", ThisKey="TI_ID", OtherKey="TI_ID", IsForeignKey=true)]
	public WorkShifts WorkShifts
	{
		get
		{
			return this._WorkShifts.Entity;
		}
		set
		{
			WorkShifts previousValue = this._WorkShifts.Entity;
			if (((previousValue != value) 
						|| (this._WorkShifts.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._WorkShifts.Entity = null;
					previousValue.OutpatientInformation.Remove(this);
				}
				this._WorkShifts.Entity = value;
				if ((value != null))
				{
					value.OutpatientInformation.Add(this);
					this._TI_ID = value.TI_ID;
				}
				else
				{
					this._TI_ID = default(int);
				}
				this.SendPropertyChanged("WorkShifts");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_RegisterInformation(RegisterInformation entity)
	{
		this.SendPropertyChanging();
		entity.OutpatientInformation = this;
	}
	
	private void detach_RegisterInformation(RegisterInformation entity)
	{
		this.SendPropertyChanging();
		entity.OutpatientInformation = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
public partial class Patients : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Ptt_ID;
	
	private int _Ptt_Num;
	
	private string _Ptt_Name;
	
	private string _Ptt_PID;
	
	private System.DateTime _Ptt_BD;
	
	private string _Ptt_Sex;
	
	private string _Ptt_TN;
	
	private string _Ptt_Addr;
	
	private string _Ptt_Email;
	
	private System.Nullable<bool> _Ptt_VIP;
	
	private bool _Ptt_ExamRmd;
	
	private bool _Ptt_DrugRmd;
	
	private string _Ptt_Pwd;
	
	private string _Ptt_Salt;
	
	private System.Data.Linq.Binary _Ptt_Pix;
	
	private EntitySet<Evaluation> _Evaluation;
	
	private EntitySet<RegisterInformation> _RegisterInformation;
	
	private EntitySet<TimeLines> _TimeLines;
	
	private EntitySet<UseRecords> _UseRecords;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPtt_IDChanging(int value);
    partial void OnPtt_IDChanged();
    partial void OnPtt_NumChanging(int value);
    partial void OnPtt_NumChanged();
    partial void OnPtt_NameChanging(string value);
    partial void OnPtt_NameChanged();
    partial void OnPtt_PIDChanging(string value);
    partial void OnPtt_PIDChanged();
    partial void OnPtt_BDChanging(System.DateTime value);
    partial void OnPtt_BDChanged();
    partial void OnPtt_SexChanging(string value);
    partial void OnPtt_SexChanged();
    partial void OnPtt_TNChanging(string value);
    partial void OnPtt_TNChanged();
    partial void OnPtt_AddrChanging(string value);
    partial void OnPtt_AddrChanged();
    partial void OnPtt_EmailChanging(string value);
    partial void OnPtt_EmailChanged();
    partial void OnPtt_VIPChanging(System.Nullable<bool> value);
    partial void OnPtt_VIPChanged();
    partial void OnPtt_ExamRmdChanging(bool value);
    partial void OnPtt_ExamRmdChanged();
    partial void OnPtt_DrugRmdChanging(bool value);
    partial void OnPtt_DrugRmdChanged();
    partial void OnPtt_PwdChanging(string value);
    partial void OnPtt_PwdChanged();
    partial void OnPtt_SaltChanging(string value);
    partial void OnPtt_SaltChanged();
    partial void OnPtt_PixChanging(System.Data.Linq.Binary value);
    partial void OnPtt_PixChanged();
    #endregion
	
	public Patients()
	{
		this._Evaluation = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluation), new Action<Evaluation>(this.detach_Evaluation));
		this._RegisterInformation = new EntitySet<RegisterInformation>(new Action<RegisterInformation>(this.attach_RegisterInformation), new Action<RegisterInformation>(this.detach_RegisterInformation));
		this._TimeLines = new EntitySet<TimeLines>(new Action<TimeLines>(this.attach_TimeLines), new Action<TimeLines>(this.detach_TimeLines));
		this._UseRecords = new EntitySet<UseRecords>(new Action<UseRecords>(this.attach_UseRecords), new Action<UseRecords>(this.detach_UseRecords));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Ptt_ID
	{
		get
		{
			return this._Ptt_ID;
		}
		set
		{
			if ((this._Ptt_ID != value))
			{
				this.OnPtt_IDChanging(value);
				this.SendPropertyChanging();
				this._Ptt_ID = value;
				this.SendPropertyChanged("Ptt_ID");
				this.OnPtt_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Num", DbType="Int NOT NULL")]
	public int Ptt_Num
	{
		get
		{
			return this._Ptt_Num;
		}
		set
		{
			if ((this._Ptt_Num != value))
			{
				this.OnPtt_NumChanging(value);
				this.SendPropertyChanging();
				this._Ptt_Num = value;
				this.SendPropertyChanged("Ptt_Num");
				this.OnPtt_NumChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Ptt_Name
	{
		get
		{
			return this._Ptt_Name;
		}
		set
		{
			if ((this._Ptt_Name != value))
			{
				this.OnPtt_NameChanging(value);
				this.SendPropertyChanging();
				this._Ptt_Name = value;
				this.SendPropertyChanged("Ptt_Name");
				this.OnPtt_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_PID", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Ptt_PID
	{
		get
		{
			return this._Ptt_PID;
		}
		set
		{
			if ((this._Ptt_PID != value))
			{
				this.OnPtt_PIDChanging(value);
				this.SendPropertyChanging();
				this._Ptt_PID = value;
				this.SendPropertyChanged("Ptt_PID");
				this.OnPtt_PIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_BD", DbType="Date NOT NULL")]
	public System.DateTime Ptt_BD
	{
		get
		{
			return this._Ptt_BD;
		}
		set
		{
			if ((this._Ptt_BD != value))
			{
				this.OnPtt_BDChanging(value);
				this.SendPropertyChanging();
				this._Ptt_BD = value;
				this.SendPropertyChanged("Ptt_BD");
				this.OnPtt_BDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Sex", DbType="NVarChar(2) NOT NULL", CanBeNull=false)]
	public string Ptt_Sex
	{
		get
		{
			return this._Ptt_Sex;
		}
		set
		{
			if ((this._Ptt_Sex != value))
			{
				this.OnPtt_SexChanging(value);
				this.SendPropertyChanging();
				this._Ptt_Sex = value;
				this.SendPropertyChanged("Ptt_Sex");
				this.OnPtt_SexChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_TN", DbType="NVarChar(15)")]
	public string Ptt_TN
	{
		get
		{
			return this._Ptt_TN;
		}
		set
		{
			if ((this._Ptt_TN != value))
			{
				this.OnPtt_TNChanging(value);
				this.SendPropertyChanging();
				this._Ptt_TN = value;
				this.SendPropertyChanged("Ptt_TN");
				this.OnPtt_TNChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Addr", DbType="NVarChar(50)")]
	public string Ptt_Addr
	{
		get
		{
			return this._Ptt_Addr;
		}
		set
		{
			if ((this._Ptt_Addr != value))
			{
				this.OnPtt_AddrChanging(value);
				this.SendPropertyChanging();
				this._Ptt_Addr = value;
				this.SendPropertyChanged("Ptt_Addr");
				this.OnPtt_AddrChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Email", DbType="NVarChar(50)")]
	public string Ptt_Email
	{
		get
		{
			return this._Ptt_Email;
		}
		set
		{
			if ((this._Ptt_Email != value))
			{
				this.OnPtt_EmailChanging(value);
				this.SendPropertyChanging();
				this._Ptt_Email = value;
				this.SendPropertyChanged("Ptt_Email");
				this.OnPtt_EmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_VIP", DbType="Bit")]
	public System.Nullable<bool> Ptt_VIP
	{
		get
		{
			return this._Ptt_VIP;
		}
		set
		{
			if ((this._Ptt_VIP != value))
			{
				this.OnPtt_VIPChanging(value);
				this.SendPropertyChanging();
				this._Ptt_VIP = value;
				this.SendPropertyChanged("Ptt_VIP");
				this.OnPtt_VIPChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_ExamRmd", DbType="Bit NOT NULL")]
	public bool Ptt_ExamRmd
	{
		get
		{
			return this._Ptt_ExamRmd;
		}
		set
		{
			if ((this._Ptt_ExamRmd != value))
			{
				this.OnPtt_ExamRmdChanging(value);
				this.SendPropertyChanging();
				this._Ptt_ExamRmd = value;
				this.SendPropertyChanged("Ptt_ExamRmd");
				this.OnPtt_ExamRmdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_DrugRmd", DbType="Bit NOT NULL")]
	public bool Ptt_DrugRmd
	{
		get
		{
			return this._Ptt_DrugRmd;
		}
		set
		{
			if ((this._Ptt_DrugRmd != value))
			{
				this.OnPtt_DrugRmdChanging(value);
				this.SendPropertyChanging();
				this._Ptt_DrugRmd = value;
				this.SendPropertyChanged("Ptt_DrugRmd");
				this.OnPtt_DrugRmdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Pwd", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
	public string Ptt_Pwd
	{
		get
		{
			return this._Ptt_Pwd;
		}
		set
		{
			if ((this._Ptt_Pwd != value))
			{
				this.OnPtt_PwdChanging(value);
				this.SendPropertyChanging();
				this._Ptt_Pwd = value;
				this.SendPropertyChanged("Ptt_Pwd");
				this.OnPtt_PwdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Salt", DbType="NVarChar(16)")]
	public string Ptt_Salt
	{
		get
		{
			return this._Ptt_Salt;
		}
		set
		{
			if ((this._Ptt_Salt != value))
			{
				this.OnPtt_SaltChanging(value);
				this.SendPropertyChanging();
				this._Ptt_Salt = value;
				this.SendPropertyChanged("Ptt_Salt");
				this.OnPtt_SaltChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Pix", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Ptt_Pix
	{
		get
		{
			return this._Ptt_Pix;
		}
		set
		{
			if ((this._Ptt_Pix != value))
			{
				this.OnPtt_PixChanging(value);
				this.SendPropertyChanging();
				this._Ptt_Pix = value;
				this.SendPropertyChanged("Ptt_Pix");
				this.OnPtt_PixChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_Evaluation", Storage="_Evaluation", ThisKey="Ptt_ID", OtherKey="Ptt_ID")]
	public EntitySet<Evaluation> Evaluation
	{
		get
		{
			return this._Evaluation;
		}
		set
		{
			this._Evaluation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_RegisterInformation", Storage="_RegisterInformation", ThisKey="Ptt_ID", OtherKey="Ptt_ID")]
	public EntitySet<RegisterInformation> RegisterInformation
	{
		get
		{
			return this._RegisterInformation;
		}
		set
		{
			this._RegisterInformation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_TimeLines", Storage="_TimeLines", ThisKey="Ptt_ID", OtherKey="Ptt_ID")]
	public EntitySet<TimeLines> TimeLines
	{
		get
		{
			return this._TimeLines;
		}
		set
		{
			this._TimeLines.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_UseRecords", Storage="_UseRecords", ThisKey="Ptt_ID", OtherKey="Ptt_ID")]
	public EntitySet<UseRecords> UseRecords
	{
		get
		{
			return this._UseRecords;
		}
		set
		{
			this._UseRecords.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Evaluation(Evaluation entity)
	{
		this.SendPropertyChanging();
		entity.Patients = this;
	}
	
	private void detach_Evaluation(Evaluation entity)
	{
		this.SendPropertyChanging();
		entity.Patients = null;
	}
	
	private void attach_RegisterInformation(RegisterInformation entity)
	{
		this.SendPropertyChanging();
		entity.Patients = this;
	}
	
	private void detach_RegisterInformation(RegisterInformation entity)
	{
		this.SendPropertyChanging();
		entity.Patients = null;
	}
	
	private void attach_TimeLines(TimeLines entity)
	{
		this.SendPropertyChanging();
		entity.Patients = this;
	}
	
	private void detach_TimeLines(TimeLines entity)
	{
		this.SendPropertyChanging();
		entity.Patients = null;
	}
	
	private void attach_UseRecords(UseRecords entity)
	{
		this.SendPropertyChanging();
		entity.Patients = this;
	}
	
	private void detach_UseRecords(UseRecords entity)
	{
		this.SendPropertyChanging();
		entity.Patients = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegisterInformation")]
public partial class RegisterInformation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RegInfo_ID;
	
	private int _Ptt_ID;
	
	private int _Staff_ID;
	
	private int _OPI_ID;
	
	private EntitySet<Diagnosis> _Diagnosis;
	
	private EntityRef<Patients> _Patients;
	
	private EntityRef<OutpatientInformation> _OutpatientInformation;
	
	private EntityRef<Staffs> _Staffs;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegInfo_IDChanging(int value);
    partial void OnRegInfo_IDChanged();
    partial void OnPtt_IDChanging(int value);
    partial void OnPtt_IDChanged();
    partial void OnStaff_IDChanging(int value);
    partial void OnStaff_IDChanged();
    partial void OnOPI_IDChanging(int value);
    partial void OnOPI_IDChanged();
    #endregion
	
	public RegisterInformation()
	{
		this._Diagnosis = new EntitySet<Diagnosis>(new Action<Diagnosis>(this.attach_Diagnosis), new Action<Diagnosis>(this.detach_Diagnosis));
		this._Patients = default(EntityRef<Patients>);
		this._OutpatientInformation = default(EntityRef<OutpatientInformation>);
		this._Staffs = default(EntityRef<Staffs>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegInfo_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RegInfo_ID
	{
		get
		{
			return this._RegInfo_ID;
		}
		set
		{
			if ((this._RegInfo_ID != value))
			{
				this.OnRegInfo_IDChanging(value);
				this.SendPropertyChanging();
				this._RegInfo_ID = value;
				this.SendPropertyChanged("RegInfo_ID");
				this.OnRegInfo_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_ID", DbType="Int NOT NULL")]
	public int Ptt_ID
	{
		get
		{
			return this._Ptt_ID;
		}
		set
		{
			if ((this._Ptt_ID != value))
			{
				if (this._Patients.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPtt_IDChanging(value);
				this.SendPropertyChanging();
				this._Ptt_ID = value;
				this.SendPropertyChanged("Ptt_ID");
				this.OnPtt_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="Int NOT NULL")]
	public int Staff_ID
	{
		get
		{
			return this._Staff_ID;
		}
		set
		{
			if ((this._Staff_ID != value))
			{
				if (this._Staffs.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStaff_IDChanging(value);
				this.SendPropertyChanging();
				this._Staff_ID = value;
				this.SendPropertyChanged("Staff_ID");
				this.OnStaff_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPI_ID", DbType="Int NOT NULL")]
	public int OPI_ID
	{
		get
		{
			return this._OPI_ID;
		}
		set
		{
			if ((this._OPI_ID != value))
			{
				if (this._OutpatientInformation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOPI_IDChanging(value);
				this.SendPropertyChanging();
				this._OPI_ID = value;
				this.SendPropertyChanged("OPI_ID");
				this.OnOPI_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisterInformation_Diagnosis", Storage="_Diagnosis", ThisKey="RegInfo_ID", OtherKey="RegInfo_ID")]
	public EntitySet<Diagnosis> Diagnosis
	{
		get
		{
			return this._Diagnosis;
		}
		set
		{
			this._Diagnosis.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_RegisterInformation", Storage="_Patients", ThisKey="Ptt_ID", OtherKey="Ptt_ID", IsForeignKey=true)]
	public Patients Patients
	{
		get
		{
			return this._Patients.Entity;
		}
		set
		{
			Patients previousValue = this._Patients.Entity;
			if (((previousValue != value) 
						|| (this._Patients.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patients.Entity = null;
					previousValue.RegisterInformation.Remove(this);
				}
				this._Patients.Entity = value;
				if ((value != null))
				{
					value.RegisterInformation.Add(this);
					this._Ptt_ID = value.Ptt_ID;
				}
				else
				{
					this._Ptt_ID = default(int);
				}
				this.SendPropertyChanged("Patients");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OutpatientInformation_RegisterInformation", Storage="_OutpatientInformation", ThisKey="OPI_ID", OtherKey="OPI_ID", IsForeignKey=true)]
	public OutpatientInformation OutpatientInformation
	{
		get
		{
			return this._OutpatientInformation.Entity;
		}
		set
		{
			OutpatientInformation previousValue = this._OutpatientInformation.Entity;
			if (((previousValue != value) 
						|| (this._OutpatientInformation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._OutpatientInformation.Entity = null;
					previousValue.RegisterInformation.Remove(this);
				}
				this._OutpatientInformation.Entity = value;
				if ((value != null))
				{
					value.RegisterInformation.Add(this);
					this._OPI_ID = value.OPI_ID;
				}
				else
				{
					this._OPI_ID = default(int);
				}
				this.SendPropertyChanged("OutpatientInformation");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_RegisterInformation", Storage="_Staffs", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
	public Staffs Staffs
	{
		get
		{
			return this._Staffs.Entity;
		}
		set
		{
			Staffs previousValue = this._Staffs.Entity;
			if (((previousValue != value) 
						|| (this._Staffs.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Staffs.Entity = null;
					previousValue.RegisterInformation.Remove(this);
				}
				this._Staffs.Entity = value;
				if ((value != null))
				{
					value.RegisterInformation.Add(this);
					this._Staff_ID = value.Staff_ID;
				}
				else
				{
					this._Staff_ID = default(int);
				}
				this.SendPropertyChanged("Staffs");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Diagnosis(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.RegisterInformation = this;
	}
	
	private void detach_Diagnosis(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.RegisterInformation = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RemindDays")]
public partial class RemindDays : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RmdDays_ID;
	
	private int _RmdDays_Days;
	
	private EntitySet<Diagnosis> _Diagnosis;
	
	private EntitySet<ExamCalendar> _ExamCalendar;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRmdDays_IDChanging(int value);
    partial void OnRmdDays_IDChanged();
    partial void OnRmdDays_DaysChanging(int value);
    partial void OnRmdDays_DaysChanged();
    #endregion
	
	public RemindDays()
	{
		this._Diagnosis = new EntitySet<Diagnosis>(new Action<Diagnosis>(this.attach_Diagnosis), new Action<Diagnosis>(this.detach_Diagnosis));
		this._ExamCalendar = new EntitySet<ExamCalendar>(new Action<ExamCalendar>(this.attach_ExamCalendar), new Action<ExamCalendar>(this.detach_ExamCalendar));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RmdDays_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RmdDays_ID
	{
		get
		{
			return this._RmdDays_ID;
		}
		set
		{
			if ((this._RmdDays_ID != value))
			{
				this.OnRmdDays_IDChanging(value);
				this.SendPropertyChanging();
				this._RmdDays_ID = value;
				this.SendPropertyChanged("RmdDays_ID");
				this.OnRmdDays_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RmdDays_Days", DbType="Int NOT NULL")]
	public int RmdDays_Days
	{
		get
		{
			return this._RmdDays_Days;
		}
		set
		{
			if ((this._RmdDays_Days != value))
			{
				this.OnRmdDays_DaysChanging(value);
				this.SendPropertyChanging();
				this._RmdDays_Days = value;
				this.SendPropertyChanged("RmdDays_Days");
				this.OnRmdDays_DaysChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RemindDays_Diagnosis", Storage="_Diagnosis", ThisKey="RmdDays_ID", OtherKey="RmdDay_ID")]
	public EntitySet<Diagnosis> Diagnosis
	{
		get
		{
			return this._Diagnosis;
		}
		set
		{
			this._Diagnosis.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RemindDays_ExamCalendar", Storage="_ExamCalendar", ThisKey="RmdDays_ID", OtherKey="RmdDays_ID")]
	public EntitySet<ExamCalendar> ExamCalendar
	{
		get
		{
			return this._ExamCalendar;
		}
		set
		{
			this._ExamCalendar.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Diagnosis(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.RemindDays = this;
	}
	
	private void detach_Diagnosis(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.RemindDays = null;
	}
	
	private void attach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.RemindDays = this;
	}
	
	private void detach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.RemindDays = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Situations")]
public partial class Situations : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Status_ID;
	
	private string _Status_Name;
	
	private EntitySet<DrugCalendar> _DrugCalendar;
	
	private EntitySet<ExamCalendar> _ExamCalendar;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatus_IDChanging(int value);
    partial void OnStatus_IDChanged();
    partial void OnStatus_NameChanging(string value);
    partial void OnStatus_NameChanged();
    #endregion
	
	public Situations()
	{
		this._DrugCalendar = new EntitySet<DrugCalendar>(new Action<DrugCalendar>(this.attach_DrugCalendar), new Action<DrugCalendar>(this.detach_DrugCalendar));
		this._ExamCalendar = new EntitySet<ExamCalendar>(new Action<ExamCalendar>(this.attach_ExamCalendar), new Action<ExamCalendar>(this.detach_ExamCalendar));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Status_ID
	{
		get
		{
			return this._Status_ID;
		}
		set
		{
			if ((this._Status_ID != value))
			{
				this.OnStatus_IDChanging(value);
				this.SendPropertyChanging();
				this._Status_ID = value;
				this.SendPropertyChanged("Status_ID");
				this.OnStatus_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Status_Name
	{
		get
		{
			return this._Status_Name;
		}
		set
		{
			if ((this._Status_Name != value))
			{
				this.OnStatus_NameChanging(value);
				this.SendPropertyChanging();
				this._Status_Name = value;
				this.SendPropertyChanged("Status_Name");
				this.OnStatus_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Situations_DrugCalendar", Storage="_DrugCalendar", ThisKey="Status_ID", OtherKey="Status_ID")]
	public EntitySet<DrugCalendar> DrugCalendar
	{
		get
		{
			return this._DrugCalendar;
		}
		set
		{
			this._DrugCalendar.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Situations_ExamCalendar", Storage="_ExamCalendar", ThisKey="Status_ID", OtherKey="Status_ID")]
	public EntitySet<ExamCalendar> ExamCalendar
	{
		get
		{
			return this._ExamCalendar;
		}
		set
		{
			this._ExamCalendar.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DrugCalendar(DrugCalendar entity)
	{
		this.SendPropertyChanging();
		entity.Situations = this;
	}
	
	private void detach_DrugCalendar(DrugCalendar entity)
	{
		this.SendPropertyChanging();
		entity.Situations = null;
	}
	
	private void attach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.Situations = this;
	}
	
	private void detach_ExamCalendar(ExamCalendar entity)
	{
		this.SendPropertyChanging();
		entity.Situations = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staffs")]
public partial class Staffs : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Staff_ID;
	
	private System.Data.Linq.Binary _Staff_Pix;
	
	private string _Staff_Name;
	
	private int _Job_ID;
	
	private int _Div_ID;
	
	private string _Staff_TN;
	
	private string _Staff_Email;
	
	private string _Staff_Acc;
	
	private string _Staff_Pwd;
	
	private string _Staff_Salt;
	
	private string _Staff_Edu;
	
	private string _Staff_Exp;
	
	private string _Staff_Skill;
	
	private EntitySet<Diagnosis> _Diagnosis;
	
	private EntitySet<Diagnosis> _Diagnosis1;
	
	private EntitySet<Diagnosis> _Diagnosis2;
	
	private EntitySet<Evaluation> _Evaluation;
	
	private EntitySet<RegisterInformation> _RegisterInformation;
	
	private EntitySet<UseRecords> _UseRecords;
	
	private EntityRef<Divisions> _Divisions;
	
	private EntityRef<JobTitles> _JobTitles;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_IDChanging(int value);
    partial void OnStaff_IDChanged();
    partial void OnStaff_PixChanging(System.Data.Linq.Binary value);
    partial void OnStaff_PixChanged();
    partial void OnStaff_NameChanging(string value);
    partial void OnStaff_NameChanged();
    partial void OnJob_IDChanging(int value);
    partial void OnJob_IDChanged();
    partial void OnDiv_IDChanging(int value);
    partial void OnDiv_IDChanged();
    partial void OnStaff_TNChanging(string value);
    partial void OnStaff_TNChanged();
    partial void OnStaff_EmailChanging(string value);
    partial void OnStaff_EmailChanged();
    partial void OnStaff_AccChanging(string value);
    partial void OnStaff_AccChanged();
    partial void OnStaff_PwdChanging(string value);
    partial void OnStaff_PwdChanged();
    partial void OnStaff_SaltChanging(string value);
    partial void OnStaff_SaltChanged();
    partial void OnStaff_EduChanging(string value);
    partial void OnStaff_EduChanged();
    partial void OnStaff_ExpChanging(string value);
    partial void OnStaff_ExpChanged();
    partial void OnStaff_SkillChanging(string value);
    partial void OnStaff_SkillChanged();
    #endregion
	
	public Staffs()
	{
		this._Diagnosis = new EntitySet<Diagnosis>(new Action<Diagnosis>(this.attach_Diagnosis), new Action<Diagnosis>(this.detach_Diagnosis));
		this._Diagnosis1 = new EntitySet<Diagnosis>(new Action<Diagnosis>(this.attach_Diagnosis1), new Action<Diagnosis>(this.detach_Diagnosis1));
		this._Diagnosis2 = new EntitySet<Diagnosis>(new Action<Diagnosis>(this.attach_Diagnosis2), new Action<Diagnosis>(this.detach_Diagnosis2));
		this._Evaluation = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluation), new Action<Evaluation>(this.detach_Evaluation));
		this._RegisterInformation = new EntitySet<RegisterInformation>(new Action<RegisterInformation>(this.attach_RegisterInformation), new Action<RegisterInformation>(this.detach_RegisterInformation));
		this._UseRecords = new EntitySet<UseRecords>(new Action<UseRecords>(this.attach_UseRecords), new Action<UseRecords>(this.detach_UseRecords));
		this._Divisions = default(EntityRef<Divisions>);
		this._JobTitles = default(EntityRef<JobTitles>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Staff_ID
	{
		get
		{
			return this._Staff_ID;
		}
		set
		{
			if ((this._Staff_ID != value))
			{
				this.OnStaff_IDChanging(value);
				this.SendPropertyChanging();
				this._Staff_ID = value;
				this.SendPropertyChanged("Staff_ID");
				this.OnStaff_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Pix", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Staff_Pix
	{
		get
		{
			return this._Staff_Pix;
		}
		set
		{
			if ((this._Staff_Pix != value))
			{
				this.OnStaff_PixChanging(value);
				this.SendPropertyChanging();
				this._Staff_Pix = value;
				this.SendPropertyChanged("Staff_Pix");
				this.OnStaff_PixChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Staff_Name
	{
		get
		{
			return this._Staff_Name;
		}
		set
		{
			if ((this._Staff_Name != value))
			{
				this.OnStaff_NameChanging(value);
				this.SendPropertyChanging();
				this._Staff_Name = value;
				this.SendPropertyChanged("Staff_Name");
				this.OnStaff_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Job_ID", DbType="Int NOT NULL")]
	public int Job_ID
	{
		get
		{
			return this._Job_ID;
		}
		set
		{
			if ((this._Job_ID != value))
			{
				if (this._JobTitles.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnJob_IDChanging(value);
				this.SendPropertyChanging();
				this._Job_ID = value;
				this.SendPropertyChanged("Job_ID");
				this.OnJob_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Div_ID", DbType="Int NOT NULL")]
	public int Div_ID
	{
		get
		{
			return this._Div_ID;
		}
		set
		{
			if ((this._Div_ID != value))
			{
				if (this._Divisions.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDiv_IDChanging(value);
				this.SendPropertyChanging();
				this._Div_ID = value;
				this.SendPropertyChanged("Div_ID");
				this.OnDiv_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_TN", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
	public string Staff_TN
	{
		get
		{
			return this._Staff_TN;
		}
		set
		{
			if ((this._Staff_TN != value))
			{
				this.OnStaff_TNChanging(value);
				this.SendPropertyChanging();
				this._Staff_TN = value;
				this.SendPropertyChanged("Staff_TN");
				this.OnStaff_TNChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Staff_Email
	{
		get
		{
			return this._Staff_Email;
		}
		set
		{
			if ((this._Staff_Email != value))
			{
				this.OnStaff_EmailChanging(value);
				this.SendPropertyChanging();
				this._Staff_Email = value;
				this.SendPropertyChanged("Staff_Email");
				this.OnStaff_EmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Acc", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Staff_Acc
	{
		get
		{
			return this._Staff_Acc;
		}
		set
		{
			if ((this._Staff_Acc != value))
			{
				this.OnStaff_AccChanging(value);
				this.SendPropertyChanging();
				this._Staff_Acc = value;
				this.SendPropertyChanged("Staff_Acc");
				this.OnStaff_AccChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Pwd", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
	public string Staff_Pwd
	{
		get
		{
			return this._Staff_Pwd;
		}
		set
		{
			if ((this._Staff_Pwd != value))
			{
				this.OnStaff_PwdChanging(value);
				this.SendPropertyChanging();
				this._Staff_Pwd = value;
				this.SendPropertyChanged("Staff_Pwd");
				this.OnStaff_PwdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Salt", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
	public string Staff_Salt
	{
		get
		{
			return this._Staff_Salt;
		}
		set
		{
			if ((this._Staff_Salt != value))
			{
				this.OnStaff_SaltChanging(value);
				this.SendPropertyChanging();
				this._Staff_Salt = value;
				this.SendPropertyChanged("Staff_Salt");
				this.OnStaff_SaltChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Edu", DbType="NVarChar(MAX)")]
	public string Staff_Edu
	{
		get
		{
			return this._Staff_Edu;
		}
		set
		{
			if ((this._Staff_Edu != value))
			{
				this.OnStaff_EduChanging(value);
				this.SendPropertyChanging();
				this._Staff_Edu = value;
				this.SendPropertyChanged("Staff_Edu");
				this.OnStaff_EduChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Exp", DbType="NVarChar(MAX)")]
	public string Staff_Exp
	{
		get
		{
			return this._Staff_Exp;
		}
		set
		{
			if ((this._Staff_Exp != value))
			{
				this.OnStaff_ExpChanging(value);
				this.SendPropertyChanging();
				this._Staff_Exp = value;
				this.SendPropertyChanged("Staff_Exp");
				this.OnStaff_ExpChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Skill", DbType="NVarChar(MAX)")]
	public string Staff_Skill
	{
		get
		{
			return this._Staff_Skill;
		}
		set
		{
			if ((this._Staff_Skill != value))
			{
				this.OnStaff_SkillChanging(value);
				this.SendPropertyChanging();
				this._Staff_Skill = value;
				this.SendPropertyChanged("Staff_Skill");
				this.OnStaff_SkillChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_Diagnosis", Storage="_Diagnosis", ThisKey="Staff_ID", OtherKey="Docter_ID")]
	public EntitySet<Diagnosis> Diagnosis
	{
		get
		{
			return this._Diagnosis;
		}
		set
		{
			this._Diagnosis.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_Diagnosis1", Storage="_Diagnosis1", ThisKey="Staff_ID", OtherKey="Nurse_ID")]
	public EntitySet<Diagnosis> Diagnosis1
	{
		get
		{
			return this._Diagnosis1;
		}
		set
		{
			this._Diagnosis1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_Diagnosis2", Storage="_Diagnosis2", ThisKey="Staff_ID", OtherKey="Counselor_ID")]
	public EntitySet<Diagnosis> Diagnosis2
	{
		get
		{
			return this._Diagnosis2;
		}
		set
		{
			this._Diagnosis2.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_Evaluation", Storage="_Evaluation", ThisKey="Staff_ID", OtherKey="Staff_ID")]
	public EntitySet<Evaluation> Evaluation
	{
		get
		{
			return this._Evaluation;
		}
		set
		{
			this._Evaluation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_RegisterInformation", Storage="_RegisterInformation", ThisKey="Staff_ID", OtherKey="Staff_ID")]
	public EntitySet<RegisterInformation> RegisterInformation
	{
		get
		{
			return this._RegisterInformation;
		}
		set
		{
			this._RegisterInformation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_UseRecords", Storage="_UseRecords", ThisKey="Staff_ID", OtherKey="Staff_ID")]
	public EntitySet<UseRecords> UseRecords
	{
		get
		{
			return this._UseRecords;
		}
		set
		{
			this._UseRecords.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Divisions_Staffs", Storage="_Divisions", ThisKey="Div_ID", OtherKey="Div_ID", IsForeignKey=true)]
	public Divisions Divisions
	{
		get
		{
			return this._Divisions.Entity;
		}
		set
		{
			Divisions previousValue = this._Divisions.Entity;
			if (((previousValue != value) 
						|| (this._Divisions.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Divisions.Entity = null;
					previousValue.Staffs.Remove(this);
				}
				this._Divisions.Entity = value;
				if ((value != null))
				{
					value.Staffs.Add(this);
					this._Div_ID = value.Div_ID;
				}
				else
				{
					this._Div_ID = default(int);
				}
				this.SendPropertyChanged("Divisions");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobTitles_Staffs", Storage="_JobTitles", ThisKey="Job_ID", OtherKey="Job_ID", IsForeignKey=true)]
	public JobTitles JobTitles
	{
		get
		{
			return this._JobTitles.Entity;
		}
		set
		{
			JobTitles previousValue = this._JobTitles.Entity;
			if (((previousValue != value) 
						|| (this._JobTitles.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._JobTitles.Entity = null;
					previousValue.Staffs.Remove(this);
				}
				this._JobTitles.Entity = value;
				if ((value != null))
				{
					value.Staffs.Add(this);
					this._Job_ID = value.Job_ID;
				}
				else
				{
					this._Job_ID = default(int);
				}
				this.SendPropertyChanged("JobTitles");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Diagnosis(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.Staffs = this;
	}
	
	private void detach_Diagnosis(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.Staffs = null;
	}
	
	private void attach_Diagnosis1(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.Staffs1 = this;
	}
	
	private void detach_Diagnosis1(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.Staffs1 = null;
	}
	
	private void attach_Diagnosis2(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.Staffs2 = this;
	}
	
	private void detach_Diagnosis2(Diagnosis entity)
	{
		this.SendPropertyChanging();
		entity.Staffs2 = null;
	}
	
	private void attach_Evaluation(Evaluation entity)
	{
		this.SendPropertyChanging();
		entity.Staffs = this;
	}
	
	private void detach_Evaluation(Evaluation entity)
	{
		this.SendPropertyChanging();
		entity.Staffs = null;
	}
	
	private void attach_RegisterInformation(RegisterInformation entity)
	{
		this.SendPropertyChanging();
		entity.Staffs = this;
	}
	
	private void detach_RegisterInformation(RegisterInformation entity)
	{
		this.SendPropertyChanging();
		entity.Staffs = null;
	}
	
	private void attach_UseRecords(UseRecords entity)
	{
		this.SendPropertyChanging();
		entity.Staffs = this;
	}
	
	private void detach_UseRecords(UseRecords entity)
	{
		this.SendPropertyChanging();
		entity.Staffs = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeLines")]
public partial class TimeLines : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TimeLine_ID;
	
	private int _Ptt_ID;
	
	private System.DateTime _TimeLine_Date;
	
	private string _TimeLine_Title;
	
	private string _TimeLine_Des;
	
	private System.Data.Linq.Binary _TimeLine_Bytes;
	
	private EntityRef<Patients> _Patients;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeLine_IDChanging(int value);
    partial void OnTimeLine_IDChanged();
    partial void OnPtt_IDChanging(int value);
    partial void OnPtt_IDChanged();
    partial void OnTimeLine_DateChanging(System.DateTime value);
    partial void OnTimeLine_DateChanged();
    partial void OnTimeLine_TitleChanging(string value);
    partial void OnTimeLine_TitleChanged();
    partial void OnTimeLine_DesChanging(string value);
    partial void OnTimeLine_DesChanged();
    partial void OnTimeLine_BytesChanging(System.Data.Linq.Binary value);
    partial void OnTimeLine_BytesChanged();
    #endregion
	
	public TimeLines()
	{
		this._Patients = default(EntityRef<Patients>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLine_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TimeLine_ID
	{
		get
		{
			return this._TimeLine_ID;
		}
		set
		{
			if ((this._TimeLine_ID != value))
			{
				this.OnTimeLine_IDChanging(value);
				this.SendPropertyChanging();
				this._TimeLine_ID = value;
				this.SendPropertyChanged("TimeLine_ID");
				this.OnTimeLine_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_ID", DbType="Int NOT NULL")]
	public int Ptt_ID
	{
		get
		{
			return this._Ptt_ID;
		}
		set
		{
			if ((this._Ptt_ID != value))
			{
				if (this._Patients.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPtt_IDChanging(value);
				this.SendPropertyChanging();
				this._Ptt_ID = value;
				this.SendPropertyChanged("Ptt_ID");
				this.OnPtt_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLine_Date", DbType="Date NOT NULL")]
	public System.DateTime TimeLine_Date
	{
		get
		{
			return this._TimeLine_Date;
		}
		set
		{
			if ((this._TimeLine_Date != value))
			{
				this.OnTimeLine_DateChanging(value);
				this.SendPropertyChanging();
				this._TimeLine_Date = value;
				this.SendPropertyChanged("TimeLine_Date");
				this.OnTimeLine_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLine_Title", DbType="NVarChar(20)")]
	public string TimeLine_Title
	{
		get
		{
			return this._TimeLine_Title;
		}
		set
		{
			if ((this._TimeLine_Title != value))
			{
				this.OnTimeLine_TitleChanging(value);
				this.SendPropertyChanging();
				this._TimeLine_Title = value;
				this.SendPropertyChanged("TimeLine_Title");
				this.OnTimeLine_TitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLine_Des", DbType="NVarChar(3800)")]
	public string TimeLine_Des
	{
		get
		{
			return this._TimeLine_Des;
		}
		set
		{
			if ((this._TimeLine_Des != value))
			{
				this.OnTimeLine_DesChanging(value);
				this.SendPropertyChanging();
				this._TimeLine_Des = value;
				this.SendPropertyChanged("TimeLine_Des");
				this.OnTimeLine_DesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLine_Bytes", DbType="VarBinary(MAX)", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary TimeLine_Bytes
	{
		get
		{
			return this._TimeLine_Bytes;
		}
		set
		{
			if ((this._TimeLine_Bytes != value))
			{
				this.OnTimeLine_BytesChanging(value);
				this.SendPropertyChanging();
				this._TimeLine_Bytes = value;
				this.SendPropertyChanged("TimeLine_Bytes");
				this.OnTimeLine_BytesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_TimeLines", Storage="_Patients", ThisKey="Ptt_ID", OtherKey="Ptt_ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
	public Patients Patients
	{
		get
		{
			return this._Patients.Entity;
		}
		set
		{
			Patients previousValue = this._Patients.Entity;
			if (((previousValue != value) 
						|| (this._Patients.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patients.Entity = null;
					previousValue.TimeLines.Remove(this);
				}
				this._Patients.Entity = value;
				if ((value != null))
				{
					value.TimeLines.Add(this);
					this._Ptt_ID = value.Ptt_ID;
				}
				else
				{
					this._Ptt_ID = default(int);
				}
				this.SendPropertyChanged("Patients");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UseRecords")]
public partial class UseRecords : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Rec_ID;
	
	private int _Staff_ID;
	
	private System.Nullable<int> _Ptt_ID;
	
	private int _Frm_ID;
	
	private string _Rec_Use;
	
	private System.DateTime _Rec_UT;
	
	private EntityRef<Forms> _Forms;
	
	private EntityRef<Patients> _Patients;
	
	private EntityRef<Staffs> _Staffs;
	
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRec_IDChanging(int value);
    partial void OnRec_IDChanged();
    partial void OnStaff_IDChanging(int value);
    partial void OnStaff_IDChanged();
    partial void OnPtt_IDChanging(System.Nullable<int> value);
    partial void OnPtt_IDChanged();
    partial void OnFrm_IDChanging(int value);
    partial void OnFrm_IDChanged();
    partial void OnRec_UseChanging(string value);
    partial void OnRec_UseChanged();
    partial void OnRec_UTChanging(System.DateTime value);
    partial void OnRec_UTChanged();
    #endregion
	
	public UseRecords()
	{
		this._Forms = default(EntityRef<Forms>);
		this._Patients = default(EntityRef<Patients>);
		this._Staffs = default(EntityRef<Staffs>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rec_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Rec_ID
	{
		get
		{
			return this._Rec_ID;
		}
		set
		{
			if ((this._Rec_ID != value))
			{
				this.OnRec_IDChanging(value);
				this.SendPropertyChanging();
				this._Rec_ID = value;
				this.SendPropertyChanged("Rec_ID");
				this.OnRec_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="Int NOT NULL")]
	public int Staff_ID
	{
		get
		{
			return this._Staff_ID;
		}
		set
		{
			if ((this._Staff_ID != value))
			{
				if (this._Staffs.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStaff_IDChanging(value);
				this.SendPropertyChanging();
				this._Staff_ID = value;
				this.SendPropertyChanged("Staff_ID");
				this.OnStaff_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_ID", DbType="Int")]
	public System.Nullable<int> Ptt_ID
	{
		get
		{
			return this._Ptt_ID;
		}
		set
		{
			if ((this._Ptt_ID != value))
			{
				if (this._Patients.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPtt_IDChanging(value);
				this.SendPropertyChanging();
				this._Ptt_ID = value;
				this.SendPropertyChanged("Ptt_ID");
				this.OnPtt_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frm_ID", DbType="Int NOT NULL")]
	public int Frm_ID
	{
		get
		{
			return this._Frm_ID;
		}
		set
		{
			if ((this._Frm_ID != value))
			{
				if (this._Forms.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFrm_IDChanging(value);
				this.SendPropertyChanging();
				this._Frm_ID = value;
				this.SendPropertyChanged("Frm_ID");
				this.OnFrm_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rec_Use", DbType="NVarChar(50)")]
	public string Rec_Use
	{
		get
		{
			return this._Rec_Use;
		}
		set
		{
			if ((this._Rec_Use != value))
			{
				this.OnRec_UseChanging(value);
				this.SendPropertyChanging();
				this._Rec_Use = value;
				this.SendPropertyChanged("Rec_Use");
				this.OnRec_UseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rec_UT", DbType="DateTime NOT NULL")]
	public System.DateTime Rec_UT
	{
		get
		{
			return this._Rec_UT;
		}
		set
		{
			if ((this._Rec_UT != value))
			{
				this.OnRec_UTChanging(value);
				this.SendPropertyChanging();
				this._Rec_UT = value;
				this.SendPropertyChanged("Rec_UT");
				this.OnRec_UTChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forms_UseRecords", Storage="_Forms", ThisKey="Frm_ID", OtherKey="Frm_ID", IsForeignKey=true)]
	public Forms Forms
	{
		get
		{
			return this._Forms.Entity;
		}
		set
		{
			Forms previousValue = this._Forms.Entity;
			if (((previousValue != value) 
						|| (this._Forms.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Forms.Entity = null;
					previousValue.UseRecords.Remove(this);
				}
				this._Forms.Entity = value;
				if ((value != null))
				{
					value.UseRecords.Add(this);
					this._Frm_ID = value.Frm_ID;
				}
				else
				{
					this._Frm_ID = default(int);
				}
				this.SendPropertyChanged("Forms");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patients_UseRecords", Storage="_Patients", ThisKey="Ptt_ID", OtherKey="Ptt_ID", IsForeignKey=true)]
	public Patients Patients
	{
		get
		{
			return this._Patients.Entity;
		}
		set
		{
			Patients previousValue = this._Patients.Entity;
			if (((previousValue != value) 
						|| (this._Patients.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Patients.Entity = null;
					previousValue.UseRecords.Remove(this);
				}
				this._Patients.Entity = value;
				if ((value != null))
				{
					value.UseRecords.Add(this);
					this._Ptt_ID = value.Ptt_ID;
				}
				else
				{
					this._Ptt_ID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Patients");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staffs_UseRecords", Storage="_Staffs", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
	public Staffs Staffs
	{
		get
		{
			return this._Staffs.Entity;
		}
		set
		{
			Staffs previousValue = this._Staffs.Entity;
			if (((previousValue != value) 
						|| (this._Staffs.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Staffs.Entity = null;
					previousValue.UseRecords.Remove(this);
				}
				this._Staffs.Entity = value;
				if ((value != null))
				{
					value.UseRecords.Add(this);
					this._Staff_ID = value.Staff_ID;
				}
				else
				{
					this._Staff_ID = default(int);
				}
				this.SendPropertyChanged("Staffs");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_DrugCalendar")]
public partial class View_DrugCalendars
{
	
	private bool _已提醒;
	
	private int _ID;
	
	private int _病歷號碼;
	
	private string _病患姓名;
	
	private string _主治醫師;
	
	private string _特殊藥物;
	
	private System.DateTime _用藥日期;
	
	private string _狀態;
	
	private string _備註;
	
	private int _幾天前提醒;
	
	private int _Staff_ID;
	
	private int _Drug_ID;
	
	private int _護士ID;
	
	private int _諮詢師ID;
	
	public View_DrugCalendars()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_已提醒", DbType="Bit NOT NULL")]
	public bool 已提醒
	{
		get
		{
			return this._已提醒;
		}
		set
		{
			if ((this._已提醒 != value))
			{
				this._已提醒 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this._ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病歷號碼", DbType="Int NOT NULL")]
	public int 病歷號碼
	{
		get
		{
			return this._病歷號碼;
		}
		set
		{
			if ((this._病歷號碼 != value))
			{
				this._病歷號碼 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病患姓名", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string 病患姓名
	{
		get
		{
			return this._病患姓名;
		}
		set
		{
			if ((this._病患姓名 != value))
			{
				this._病患姓名 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_主治醫師", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string 主治醫師
	{
		get
		{
			return this._主治醫師;
		}
		set
		{
			if ((this._主治醫師 != value))
			{
				this._主治醫師 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_特殊藥物", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string 特殊藥物
	{
		get
		{
			return this._特殊藥物;
		}
		set
		{
			if ((this._特殊藥物 != value))
			{
				this._特殊藥物 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用藥日期", DbType="Date NOT NULL")]
	public System.DateTime 用藥日期
	{
		get
		{
			return this._用藥日期;
		}
		set
		{
			if ((this._用藥日期 != value))
			{
				this._用藥日期 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_狀態", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string 狀態
	{
		get
		{
			return this._狀態;
		}
		set
		{
			if ((this._狀態 != value))
			{
				this._狀態 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string 備註
	{
		get
		{
			return this._備註;
		}
		set
		{
			if ((this._備註 != value))
			{
				this._備註 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_幾天前提醒", DbType="Int NOT NULL")]
	public int 幾天前提醒
	{
		get
		{
			return this._幾天前提醒;
		}
		set
		{
			if ((this._幾天前提醒 != value))
			{
				this._幾天前提醒 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="Int NOT NULL")]
	public int Staff_ID
	{
		get
		{
			return this._Staff_ID;
		}
		set
		{
			if ((this._Staff_ID != value))
			{
				this._Staff_ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drug_ID", DbType="Int")]
	public int Drug_ID
	{
		get
		{
			return this._Drug_ID;
		}
		set
		{
			if ((this._Drug_ID != value))
			{
				this._Drug_ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_護士ID", DbType="Int NOT NULL")]
	public int 護士ID
	{
		get
		{
			return this._護士ID;
		}
		set
		{
			if ((this._護士ID != value))
			{
				this._護士ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_諮詢師ID", DbType="Int NOT NULL")]
	public int 諮詢師ID
	{
		get
		{
			return this._諮詢師ID;
		}
		set
		{
			if ((this._諮詢師ID != value))
			{
				this._諮詢師ID = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_ExamSchedules")]
public partial class View_ExamSchedules
{
	
	private int _ID;
	
	private int _病歷號碼;
	
	private string _病患名稱;
	
	private string _檢驗名稱;
	
	private string _檢驗頻率;
	
	private System.DateTime _起始日期;
	
	private System.Nullable<System.DateTime> _結束日期;
	
	private string _備註;
	
	private bool _結案;
	
	private string _結案原因;
	
	public View_ExamSchedules()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this._ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病歷號碼", DbType="Int NOT NULL")]
	public int 病歷號碼
	{
		get
		{
			return this._病歷號碼;
		}
		set
		{
			if ((this._病歷號碼 != value))
			{
				this._病歷號碼 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病患名稱", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string 病患名稱
	{
		get
		{
			return this._病患名稱;
		}
		set
		{
			if ((this._病患名稱 != value))
			{
				this._病患名稱 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗名稱", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string 檢驗名稱
	{
		get
		{
			return this._檢驗名稱;
		}
		set
		{
			if ((this._檢驗名稱 != value))
			{
				this._檢驗名稱 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗頻率", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string 檢驗頻率
	{
		get
		{
			return this._檢驗頻率;
		}
		set
		{
			if ((this._檢驗頻率 != value))
			{
				this._檢驗頻率 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_起始日期", DbType="Date NOT NULL")]
	public System.DateTime 起始日期
	{
		get
		{
			return this._起始日期;
		}
		set
		{
			if ((this._起始日期 != value))
			{
				this._起始日期 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結束日期", DbType="Date")]
	public System.Nullable<System.DateTime> 結束日期
	{
		get
		{
			return this._結束日期;
		}
		set
		{
			if ((this._結束日期 != value))
			{
				this._結束日期 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
	public string 備註
	{
		get
		{
			return this._備註;
		}
		set
		{
			if ((this._備註 != value))
			{
				this._備註 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案", DbType="Bit NOT NULL")]
	public bool 結案
	{
		get
		{
			return this._結案;
		}
		set
		{
			if ((this._結案 != value))
			{
				this._結案 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案原因", DbType="NVarChar(MAX)")]
	public string 結案原因
	{
		get
		{
			return this._結案原因;
		}
		set
		{
			if ((this._結案原因 != value))
			{
				this._結案原因 = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_DrugReminder")]
public partial class View_DrugReminder
{
	
	private string _PatientName;
	
	private string _Email;
	
	private string _PhoneNum;
	
	private string _Division;
	
	private int _BeforeDays;
	
	private bool _WantRemind;
	
	private string _DrugName;
	
	private int _PatientID;
	
	private int _DrugCalendarID;
	
	private System.DateTime _DrugTakenDate;
	
	private bool _isRemind;
	
	public View_DrugReminder()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string PatientName
	{
		get
		{
			return this._PatientName;
		}
		set
		{
			if ((this._PatientName != value))
			{
				this._PatientName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this._Email = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNum", DbType="NVarChar(15)")]
	public string PhoneNum
	{
		get
		{
			return this._PhoneNum;
		}
		set
		{
			if ((this._PhoneNum != value))
			{
				this._PhoneNum = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Division", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Division
	{
		get
		{
			return this._Division;
		}
		set
		{
			if ((this._Division != value))
			{
				this._Division = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeforeDays", DbType="Int NOT NULL")]
	public int BeforeDays
	{
		get
		{
			return this._BeforeDays;
		}
		set
		{
			if ((this._BeforeDays != value))
			{
				this._BeforeDays = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WantRemind", DbType="Bit NOT NULL")]
	public bool WantRemind
	{
		get
		{
			return this._WantRemind;
		}
		set
		{
			if ((this._WantRemind != value))
			{
				this._WantRemind = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string DrugName
	{
		get
		{
			return this._DrugName;
		}
		set
		{
			if ((this._DrugName != value))
			{
				this._DrugName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int NOT NULL")]
	public int PatientID
	{
		get
		{
			return this._PatientID;
		}
		set
		{
			if ((this._PatientID != value))
			{
				this._PatientID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugCalendarID", DbType="Int NOT NULL")]
	public int DrugCalendarID
	{
		get
		{
			return this._DrugCalendarID;
		}
		set
		{
			if ((this._DrugCalendarID != value))
			{
				this._DrugCalendarID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrugTakenDate", DbType="Date NOT NULL")]
	public System.DateTime DrugTakenDate
	{
		get
		{
			return this._DrugTakenDate;
		}
		set
		{
			if ((this._DrugTakenDate != value))
			{
				this._DrugTakenDate = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isRemind", DbType="Bit NOT NULL")]
	public bool isRemind
	{
		get
		{
			return this._isRemind;
		}
		set
		{
			if ((this._isRemind != value))
			{
				this._isRemind = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_DrugSchedule")]
public partial class View_DrugSchedules
{
	
	private int _ID;
	
	private int _病歷號碼;
	
	private string _姓名;
	
	private string _藥物名稱;
	
	private string _使用頻率;
	
	private System.DateTime _起始日期;
	
	private System.Nullable<System.DateTime> _結束日期;
	
	private string _備註;
	
	private bool _結案;
	
	private string _結案原因;
	
	public View_DrugSchedules()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this._ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病歷號碼", DbType="Int NOT NULL")]
	public int 病歷號碼
	{
		get
		{
			return this._病歷號碼;
		}
		set
		{
			if ((this._病歷號碼 != value))
			{
				this._病歷號碼 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_姓名", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string 姓名
	{
		get
		{
			return this._姓名;
		}
		set
		{
			if ((this._姓名 != value))
			{
				this._姓名 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_藥物名稱", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string 藥物名稱
	{
		get
		{
			return this._藥物名稱;
		}
		set
		{
			if ((this._藥物名稱 != value))
			{
				this._藥物名稱 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_使用頻率", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string 使用頻率
	{
		get
		{
			return this._使用頻率;
		}
		set
		{
			if ((this._使用頻率 != value))
			{
				this._使用頻率 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_起始日期", DbType="Date NOT NULL")]
	public System.DateTime 起始日期
	{
		get
		{
			return this._起始日期;
		}
		set
		{
			if ((this._起始日期 != value))
			{
				this._起始日期 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結束日期", DbType="Date")]
	public System.Nullable<System.DateTime> 結束日期
	{
		get
		{
			return this._結束日期;
		}
		set
		{
			if ((this._結束日期 != value))
			{
				this._結束日期 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
	public string 備註
	{
		get
		{
			return this._備註;
		}
		set
		{
			if ((this._備註 != value))
			{
				this._備註 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案", DbType="Bit NOT NULL")]
	public bool 結案
	{
		get
		{
			return this._結案;
		}
		set
		{
			if ((this._結案 != value))
			{
				this._結案 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案原因", DbType="NVarChar(MAX)")]
	public string 結案原因
	{
		get
		{
			return this._結案原因;
		}
		set
		{
			if ((this._結案原因 != value))
			{
				this._結案原因 = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_Evaluation")]
public partial class View_Evaluation
{
	
	private int _Eva_ID;
	
	private int _Ptt_ID;
	
	private System.Nullable<int> _Eva_Sco;
	
	private string _Eva_Com;
	
	private int _Diag_ID;
	
	private System.Nullable<System.DateTime> _Diag_ND;
	
	private string _Staff_Name;
	
	private string _Eva_Rlt;
	
	private string _Ptt_Name;
	
	public View_Evaluation()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eva_ID", DbType="Int NOT NULL")]
	public int Eva_ID
	{
		get
		{
			return this._Eva_ID;
		}
		set
		{
			if ((this._Eva_ID != value))
			{
				this._Eva_ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_ID", DbType="Int NOT NULL")]
	public int Ptt_ID
	{
		get
		{
			return this._Ptt_ID;
		}
		set
		{
			if ((this._Ptt_ID != value))
			{
				this._Ptt_ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eva_Sco", DbType="Int")]
	public System.Nullable<int> Eva_Sco
	{
		get
		{
			return this._Eva_Sco;
		}
		set
		{
			if ((this._Eva_Sco != value))
			{
				this._Eva_Sco = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eva_Com", DbType="NVarChar(MAX)")]
	public string Eva_Com
	{
		get
		{
			return this._Eva_Com;
		}
		set
		{
			if ((this._Eva_Com != value))
			{
				this._Eva_Com = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diag_ID", DbType="Int NOT NULL")]
	public int Diag_ID
	{
		get
		{
			return this._Diag_ID;
		}
		set
		{
			if ((this._Diag_ID != value))
			{
				this._Diag_ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Diag_ND", DbType="Date")]
	public System.Nullable<System.DateTime> Diag_ND
	{
		get
		{
			return this._Diag_ND;
		}
		set
		{
			if ((this._Diag_ND != value))
			{
				this._Diag_ND = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Staff_Name
	{
		get
		{
			return this._Staff_Name;
		}
		set
		{
			if ((this._Staff_Name != value))
			{
				this._Staff_Name = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Eva_Rlt", DbType="NVarChar(MAX)")]
	public string Eva_Rlt
	{
		get
		{
			return this._Eva_Rlt;
		}
		set
		{
			if ((this._Eva_Rlt != value))
			{
				this._Eva_Rlt = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ptt_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Ptt_Name
	{
		get
		{
			return this._Ptt_Name;
		}
		set
		{
			if ((this._Ptt_Name != value))
			{
				this._Ptt_Name = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_ExamCalendar")]
public partial class View_ExamCalendars
{
	
	private bool _已提醒;
	
	private int _行事曆ID;
	
	private int _病歷號碼;
	
	private string _病患名稱;
	
	private string _檢驗項目;
	
	private System.DateTime _檢驗日期;
	
	private string _主治醫師;
	
	private string _狀態;
	
	private string _備註;
	
	private string _檢驗結果;
	
	private string _結果值;
	
	private int _提早天數;
	
	private int _護士ID;
	
	private int _諮詢師ID;
	
	public View_ExamCalendars()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_已提醒", DbType="Bit NOT NULL")]
	public bool 已提醒
	{
		get
		{
			return this._已提醒;
		}
		set
		{
			if ((this._已提醒 != value))
			{
				this._已提醒 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_行事曆ID", DbType="Int NOT NULL")]
	public int 行事曆ID
	{
		get
		{
			return this._行事曆ID;
		}
		set
		{
			if ((this._行事曆ID != value))
			{
				this._行事曆ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病歷號碼", DbType="Int NOT NULL")]
	public int 病歷號碼
	{
		get
		{
			return this._病歷號碼;
		}
		set
		{
			if ((this._病歷號碼 != value))
			{
				this._病歷號碼 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病患名稱", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string 病患名稱
	{
		get
		{
			return this._病患名稱;
		}
		set
		{
			if ((this._病患名稱 != value))
			{
				this._病患名稱 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗項目", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string 檢驗項目
	{
		get
		{
			return this._檢驗項目;
		}
		set
		{
			if ((this._檢驗項目 != value))
			{
				this._檢驗項目 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗日期", DbType="Date NOT NULL")]
	public System.DateTime 檢驗日期
	{
		get
		{
			return this._檢驗日期;
		}
		set
		{
			if ((this._檢驗日期 != value))
			{
				this._檢驗日期 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_主治醫師", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string 主治醫師
	{
		get
		{
			return this._主治醫師;
		}
		set
		{
			if ((this._主治醫師 != value))
			{
				this._主治醫師 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_狀態", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string 狀態
	{
		get
		{
			return this._狀態;
		}
		set
		{
			if ((this._狀態 != value))
			{
				this._狀態 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
	public string 備註
	{
		get
		{
			return this._備註;
		}
		set
		{
			if ((this._備註 != value))
			{
				this._備註 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗結果", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string 檢驗結果
	{
		get
		{
			return this._檢驗結果;
		}
		set
		{
			if ((this._檢驗結果 != value))
			{
				this._檢驗結果 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結果值", DbType="NVarChar(50)")]
	public string 結果值
	{
		get
		{
			return this._結果值;
		}
		set
		{
			if ((this._結果值 != value))
			{
				this._結果值 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_提早天數", DbType="Int NOT NULL")]
	public int 提早天數
	{
		get
		{
			return this._提早天數;
		}
		set
		{
			if ((this._提早天數 != value))
			{
				this._提早天數 = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_護士ID", DbType="Int NOT NULL")]
	public int 護士ID
	{
		get
		{
			return this._護士ID;
		}
		set
		{
			if ((this._護士ID != value))
			{
				this._護士ID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_諮詢師ID", DbType="Int NOT NULL")]
	public int 諮詢師ID
	{
		get
		{
			return this._諮詢師ID;
		}
		set
		{
			if ((this._諮詢師ID != value))
			{
				this._諮詢師ID = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_ExamReminder")]
public partial class View_ExamReminder
{
	
	private string _PatientName;
	
	private string _Email;
	
	private string _PhoneNum;
	
	private string _DivisionName;
	
	private string _ExamName;
	
	private System.DateTime _ExamTakenDate;
	
	private int _BeforeDays;
	
	private bool _WantRemind;
	
	private bool _isRemind;
	
	private int _ExamCalendarID;
	
	public View_ExamReminder()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientName", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string PatientName
	{
		get
		{
			return this._PatientName;
		}
		set
		{
			if ((this._PatientName != value))
			{
				this._PatientName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this._Email = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNum", DbType="NVarChar(15)")]
	public string PhoneNum
	{
		get
		{
			return this._PhoneNum;
		}
		set
		{
			if ((this._PhoneNum != value))
			{
				this._PhoneNum = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionName", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string DivisionName
	{
		get
		{
			return this._DivisionName;
		}
		set
		{
			if ((this._DivisionName != value))
			{
				this._DivisionName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string ExamName
	{
		get
		{
			return this._ExamName;
		}
		set
		{
			if ((this._ExamName != value))
			{
				this._ExamName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamTakenDate", DbType="Date NOT NULL")]
	public System.DateTime ExamTakenDate
	{
		get
		{
			return this._ExamTakenDate;
		}
		set
		{
			if ((this._ExamTakenDate != value))
			{
				this._ExamTakenDate = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeforeDays", DbType="Int NOT NULL")]
	public int BeforeDays
	{
		get
		{
			return this._BeforeDays;
		}
		set
		{
			if ((this._BeforeDays != value))
			{
				this._BeforeDays = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WantRemind", DbType="Bit NOT NULL")]
	public bool WantRemind
	{
		get
		{
			return this._WantRemind;
		}
		set
		{
			if ((this._WantRemind != value))
			{
				this._WantRemind = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isRemind", DbType="Bit NOT NULL")]
	public bool isRemind
	{
		get
		{
			return this._isRemind;
		}
		set
		{
			if ((this._isRemind != value))
			{
				this._isRemind = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamCalendarID", DbType="Int NOT NULL")]
	public int ExamCalendarID
	{
		get
		{
			return this._ExamCalendarID;
		}
		set
		{
			if ((this._ExamCalendarID != value))
			{
				this._ExamCalendarID = value;
			}
		}
	}
}
#pragma warning restore 1591

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.18444
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Medicare")]
	public partial class MedicareDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 擴充性方法定義
    partial void OnCreated();
    partial void InsertExamFrequency(ExamFrequency instance);
    partial void UpdateExamFrequency(ExamFrequency instance);
    partial void DeleteExamFrequency(ExamFrequency instance);
    partial void InsertRegisterInformation(RegisterInformation instance);
    partial void UpdateRegisterInformation(RegisterInformation instance);
    partial void DeleteRegisterInformation(RegisterInformation instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertDiagnosi(Diagnosi instance);
    partial void UpdateDiagnosi(Diagnosi instance);
    partial void DeleteDiagnosi(Diagnosi instance);
    partial void InsertExamSchedule(ExamSchedule instance);
    partial void UpdateExamSchedule(ExamSchedule instance);
    partial void DeleteExamSchedule(ExamSchedule instance);
    partial void InsertExamOverview(ExamOverview instance);
    partial void UpdateExamOverview(ExamOverview instance);
    partial void DeleteExamOverview(ExamOverview instance);
    partial void InsertDrugOverview(DrugOverview instance);
    partial void UpdateDrugOverview(DrugOverview instance);
    partial void DeleteDrugOverview(DrugOverview instance);
    partial void InsertDrugSchedule(DrugSchedule instance);
    partial void UpdateDrugSchedule(DrugSchedule instance);
    partial void DeleteDrugSchedule(DrugSchedule instance);
    partial void InsertDrugFrequency(DrugFrequency instance);
    partial void UpdateDrugFrequency(DrugFrequency instance);
    partial void DeleteDrugFrequency(DrugFrequency instance);
    partial void InsertExamCalender(ExamCalender instance);
    partial void UpdateExamCalender(ExamCalender instance);
    partial void DeleteExamCalender(ExamCalender instance);
    partial void InsertDivisions(Divisions instance);
    partial void UpdateDivisions(Divisions instance);
    partial void DeleteDivisions(Divisions instance);
    partial void InsertExamCategories(ExamCategories instance);
    partial void UpdateExamCategories(ExamCategories instance);
    partial void DeleteExamCategories(ExamCategories instance);
    #endregion
		
		public MedicareDataClassesDataContext() : 
				base(global::MyDB.Properties.Settings.Default.MedicareConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MedicareDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicareDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicareDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MedicareDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ExamFrequency> ExamFrequencies
		{
			get
			{
				return this.GetTable<ExamFrequency>();
			}
		}
		
		public System.Data.Linq.Table<RegisterInformation> RegisterInformations
		{
			get
			{
				return this.GetTable<RegisterInformation>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Diagnosi> Diagnosis
		{
			get
			{
				return this.GetTable<Diagnosi>();
			}
		}
		
		public System.Data.Linq.Table<ExamSchedule> ExamSchedules
		{
			get
			{
				return this.GetTable<ExamSchedule>();
			}
		}
		
		public System.Data.Linq.Table<ExamOverview> ExamOverview
		{
			get
			{
				return this.GetTable<ExamOverview>();
			}
		}
		
		public System.Data.Linq.Table<View_ExamSchedules> View_ExamSchedules
		{
			get
			{
				return this.GetTable<View_ExamSchedules>();
			}
		}
		
		public System.Data.Linq.Table<DrugOverview> DrugOverviews
		{
			get
			{
				return this.GetTable<DrugOverview>();
			}
		}
		
		public System.Data.Linq.Table<DrugSchedule> DrugSchedules
		{
			get
			{
				return this.GetTable<DrugSchedule>();
			}
		}
		
		public System.Data.Linq.Table<DrugFrequency> DrugFrequencies
		{
			get
			{
				return this.GetTable<DrugFrequency>();
			}
		}
		
		public System.Data.Linq.Table<View_DrugSchedule> View_DrugSchedules
		{
			get
			{
				return this.GetTable<View_DrugSchedule>();
			}
		}
		
		public System.Data.Linq.Table<ExamCalender> ExamCalenders
		{
			get
			{
				return this.GetTable<ExamCalender>();
			}
		}
		
		public System.Data.Linq.Table<View_ExamCalender> View_ExamCalenders
		{
			get
			{
				return this.GetTable<View_ExamCalender>();
			}
		}
		
		public System.Data.Linq.Table<Divisions> Divisions
		{
			get
			{
				return this.GetTable<Divisions>();
			}
		}
		
		public System.Data.Linq.Table<ExamCategories> ExamCategories
		{
			get
			{
				return this.GetTable<ExamCategories>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamFrequencies")]
	public partial class ExamFrequency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _檢驗頻率ID;
		
		private string _檢驗頻率;
		
		private int _轉換天數;
		
		private EntitySet<ExamSchedule> _ExamSchedules;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On檢驗頻率IDChanging(int value);
    partial void On檢驗頻率IDChanged();
    partial void On檢驗頻率Changing(string value);
    partial void On檢驗頻率Changed();
    partial void On轉換天數Changing(int value);
    partial void On轉換天數Changed();
    #endregion
		
		public ExamFrequency()
		{
			this._ExamSchedules = new EntitySet<ExamSchedule>(new Action<ExamSchedule>(this.attach_ExamSchedules), new Action<ExamSchedule>(this.detach_ExamSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗頻率ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 檢驗頻率ID
		{
			get
			{
				return this._檢驗頻率ID;
			}
			set
			{
				if ((this._檢驗頻率ID != value))
				{
					this.On檢驗頻率IDChanging(value);
					this.SendPropertyChanging();
					this._檢驗頻率ID = value;
					this.SendPropertyChanged("檢驗頻率ID");
					this.On檢驗頻率IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗頻率", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string 檢驗頻率
		{
			get
			{
				return this._檢驗頻率;
			}
			set
			{
				if ((this._檢驗頻率 != value))
				{
					this.On檢驗頻率Changing(value);
					this.SendPropertyChanging();
					this._檢驗頻率 = value;
					this.SendPropertyChanged("檢驗頻率");
					this.On檢驗頻率Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_轉換天數", DbType="Int NOT NULL")]
		public int 轉換天數
		{
			get
			{
				return this._轉換天數;
			}
			set
			{
				if ((this._轉換天數 != value))
				{
					this.On轉換天數Changing(value);
					this.SendPropertyChanging();
					this._轉換天數 = value;
					this.SendPropertyChanged("轉換天數");
					this.On轉換天數Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamFrequency_ExamSchedule", Storage="_ExamSchedules", ThisKey="檢驗頻率ID", OtherKey="檢驗頻率ID")]
		public EntitySet<ExamSchedule> ExamSchedules
		{
			get
			{
				return this._ExamSchedules;
			}
			set
			{
				this._ExamSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamSchedules(ExamSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ExamFrequency = this;
		}
		
		private void detach_ExamSchedules(ExamSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ExamFrequency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegisterInformation")]
	public partial class RegisterInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _掛號資料ID;
		
		private int _病患ID;
		
		private int _醫療人員ID;
		
		private int _診次ID;
		
		private EntitySet<Diagnosi> _Diagnosis;
		
		private EntityRef<Patient> _Patient;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On掛號資料IDChanging(int value);
    partial void On掛號資料IDChanged();
    partial void On病患IDChanging(int value);
    partial void On病患IDChanged();
    partial void On醫療人員IDChanging(int value);
    partial void On醫療人員IDChanged();
    partial void On診次IDChanging(int value);
    partial void On診次IDChanged();
    #endregion
		
		public RegisterInformation()
		{
			this._Diagnosis = new EntitySet<Diagnosi>(new Action<Diagnosi>(this.attach_Diagnosis), new Action<Diagnosi>(this.detach_Diagnosis));
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_掛號資料ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int 掛號資料ID
		{
			get
			{
				return this._掛號資料ID;
			}
			set
			{
				if ((this._掛號資料ID != value))
				{
					this.On掛號資料IDChanging(value);
					this.SendPropertyChanging();
					this._掛號資料ID = value;
					this.SendPropertyChanged("掛號資料ID");
					this.On掛號資料IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病患ID", DbType="Int NOT NULL")]
		public int 病患ID
		{
			get
			{
				return this._病患ID;
			}
			set
			{
				if ((this._病患ID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On病患IDChanging(value);
					this.SendPropertyChanging();
					this._病患ID = value;
					this.SendPropertyChanged("病患ID");
					this.On病患IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_醫療人員ID", DbType="Int NOT NULL")]
		public int 醫療人員ID
		{
			get
			{
				return this._醫療人員ID;
			}
			set
			{
				if ((this._醫療人員ID != value))
				{
					this.On醫療人員IDChanging(value);
					this.SendPropertyChanging();
					this._醫療人員ID = value;
					this.SendPropertyChanged("醫療人員ID");
					this.On醫療人員IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_診次ID", DbType="Int NOT NULL")]
		public int 診次ID
		{
			get
			{
				return this._診次ID;
			}
			set
			{
				if ((this._診次ID != value))
				{
					this.On診次IDChanging(value);
					this.SendPropertyChanging();
					this._診次ID = value;
					this.SendPropertyChanged("診次ID");
					this.On診次IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisterInformation_Diagnosi", Storage="_Diagnosis", ThisKey="掛號資料ID", OtherKey="掛號資料ID")]
		public EntitySet<Diagnosi> Diagnosis
		{
			get
			{
				return this._Diagnosis;
			}
			set
			{
				this._Diagnosis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_RegisterInformation", Storage="_Patient", ThisKey="病患ID", OtherKey="病患ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.RegisterInformations.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.RegisterInformations.Add(this);
						this._病患ID = value.病患ID;
					}
					else
					{
						this._病患ID = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Diagnosis(Diagnosi entity)
		{
			this.SendPropertyChanging();
			entity.RegisterInformation = this;
		}
		
		private void detach_Diagnosis(Diagnosi entity)
		{
			this.SendPropertyChanging();
			entity.RegisterInformation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _病患ID;
		
		private string _姓名;
		
		private string _身分證字號;
		
		private System.Nullable<System.DateTime> _出生年月日;
		
		private string _連絡電話;
		
		private string _地址;
		
		private string _Email;
		
		private System.Nullable<bool> _VIP;
		
		private System.Nullable<bool> _檢驗是否提醒;
		
		private System.Nullable<bool> _用藥是否提醒;
		
		private System.Nullable<int> _病歷號碼;
		
		private EntitySet<RegisterInformation> _RegisterInformations;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On病患IDChanging(int value);
    partial void On病患IDChanged();
    partial void On姓名Changing(string value);
    partial void On姓名Changed();
    partial void On身分證字號Changing(string value);
    partial void On身分證字號Changed();
    partial void On出生年月日Changing(System.Nullable<System.DateTime> value);
    partial void On出生年月日Changed();
    partial void On連絡電話Changing(string value);
    partial void On連絡電話Changed();
    partial void On地址Changing(string value);
    partial void On地址Changed();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnVIPChanging(System.Nullable<bool> value);
    partial void OnVIPChanged();
    partial void On檢驗是否提醒Changing(System.Nullable<bool> value);
    partial void On檢驗是否提醒Changed();
    partial void On用藥是否提醒Changing(System.Nullable<bool> value);
    partial void On用藥是否提醒Changed();
    partial void On病歷號碼Changing(System.Nullable<int> value);
    partial void On病歷號碼Changed();
    #endregion
		
		public Patient()
		{
			this._RegisterInformations = new EntitySet<RegisterInformation>(new Action<RegisterInformation>(this.attach_RegisterInformations), new Action<RegisterInformation>(this.detach_RegisterInformations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病患ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 病患ID
		{
			get
			{
				return this._病患ID;
			}
			set
			{
				if ((this._病患ID != value))
				{
					this.On病患IDChanging(value);
					this.SendPropertyChanging();
					this._病患ID = value;
					this.SendPropertyChanged("病患ID");
					this.On病患IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_姓名", DbType="NChar(10)")]
		public string 姓名
		{
			get
			{
				return this._姓名;
			}
			set
			{
				if ((this._姓名 != value))
				{
					this.On姓名Changing(value);
					this.SendPropertyChanging();
					this._姓名 = value;
					this.SendPropertyChanged("姓名");
					this.On姓名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_身分證字號", DbType="NChar(10)")]
		public string 身分證字號
		{
			get
			{
				return this._身分證字號;
			}
			set
			{
				if ((this._身分證字號 != value))
				{
					this.On身分證字號Changing(value);
					this.SendPropertyChanging();
					this._身分證字號 = value;
					this.SendPropertyChanged("身分證字號");
					this.On身分證字號Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_出生年月日", DbType="Date")]
		public System.Nullable<System.DateTime> 出生年月日
		{
			get
			{
				return this._出生年月日;
			}
			set
			{
				if ((this._出生年月日 != value))
				{
					this.On出生年月日Changing(value);
					this.SendPropertyChanging();
					this._出生年月日 = value;
					this.SendPropertyChanged("出生年月日");
					this.On出生年月日Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_連絡電話", DbType="NChar(15)")]
		public string 連絡電話
		{
			get
			{
				return this._連絡電話;
			}
			set
			{
				if ((this._連絡電話 != value))
				{
					this.On連絡電話Changing(value);
					this.SendPropertyChanging();
					this._連絡電話 = value;
					this.SendPropertyChanged("連絡電話");
					this.On連絡電話Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_地址", DbType="NVarChar(50)")]
		public string 地址
		{
			get
			{
				return this._地址;
			}
			set
			{
				if ((this._地址 != value))
				{
					this.On地址Changing(value);
					this.SendPropertyChanging();
					this._地址 = value;
					this.SendPropertyChanged("地址");
					this.On地址Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIP", DbType="Bit")]
		public System.Nullable<bool> VIP
		{
			get
			{
				return this._VIP;
			}
			set
			{
				if ((this._VIP != value))
				{
					this.OnVIPChanging(value);
					this.SendPropertyChanging();
					this._VIP = value;
					this.SendPropertyChanged("VIP");
					this.OnVIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗是否提醒", DbType="Bit")]
		public System.Nullable<bool> 檢驗是否提醒
		{
			get
			{
				return this._檢驗是否提醒;
			}
			set
			{
				if ((this._檢驗是否提醒 != value))
				{
					this.On檢驗是否提醒Changing(value);
					this.SendPropertyChanging();
					this._檢驗是否提醒 = value;
					this.SendPropertyChanged("檢驗是否提醒");
					this.On檢驗是否提醒Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用藥是否提醒", DbType="Bit")]
		public System.Nullable<bool> 用藥是否提醒
		{
			get
			{
				return this._用藥是否提醒;
			}
			set
			{
				if ((this._用藥是否提醒 != value))
				{
					this.On用藥是否提醒Changing(value);
					this.SendPropertyChanging();
					this._用藥是否提醒 = value;
					this.SendPropertyChanged("用藥是否提醒");
					this.On用藥是否提醒Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病歷號碼", DbType="Int")]
		public System.Nullable<int> 病歷號碼
		{
			get
			{
				return this._病歷號碼;
			}
			set
			{
				if ((this._病歷號碼 != value))
				{
					this.On病歷號碼Changing(value);
					this.SendPropertyChanging();
					this._病歷號碼 = value;
					this.SendPropertyChanged("病歷號碼");
					this.On病歷號碼Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_RegisterInformation", Storage="_RegisterInformations", ThisKey="病患ID", OtherKey="病患ID")]
		public EntitySet<RegisterInformation> RegisterInformations
		{
			get
			{
				return this._RegisterInformations;
			}
			set
			{
				this._RegisterInformations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RegisterInformations(RegisterInformation entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_RegisterInformations(RegisterInformation entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Diagnosis")]
	public partial class Diagnosi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _醫囑資料ID;
		
		private int _掛號資料ID;
		
		private string _診斷;
		
		private System.Nullable<System.DateTime> _下次看診日期;
		
		private int _醫生ID;
		
		private int _護理師ID;
		
		private int _諮詢師ID;
		
		private int _提醒天數ID;
		
		private EntitySet<ExamSchedule> _ExamSchedules;
		
		private EntitySet<DrugSchedule> _DrugSchedules;
		
		private EntityRef<RegisterInformation> _RegisterInformation;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On醫囑資料IDChanging(int value);
    partial void On醫囑資料IDChanged();
    partial void On掛號資料IDChanging(int value);
    partial void On掛號資料IDChanged();
    partial void On診斷Changing(string value);
    partial void On診斷Changed();
    partial void On下次看診日期Changing(System.Nullable<System.DateTime> value);
    partial void On下次看診日期Changed();
    partial void On醫生IDChanging(int value);
    partial void On醫生IDChanged();
    partial void On護理師IDChanging(int value);
    partial void On護理師IDChanged();
    partial void On諮詢師IDChanging(int value);
    partial void On諮詢師IDChanged();
    partial void On提醒天數IDChanging(int value);
    partial void On提醒天數IDChanged();
    #endregion
		
		public Diagnosi()
		{
			this._ExamSchedules = new EntitySet<ExamSchedule>(new Action<ExamSchedule>(this.attach_ExamSchedules), new Action<ExamSchedule>(this.detach_ExamSchedules));
			this._DrugSchedules = new EntitySet<DrugSchedule>(new Action<DrugSchedule>(this.attach_DrugSchedules), new Action<DrugSchedule>(this.detach_DrugSchedules));
			this._RegisterInformation = default(EntityRef<RegisterInformation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_醫囑資料ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int 醫囑資料ID
		{
			get
			{
				return this._醫囑資料ID;
			}
			set
			{
				if ((this._醫囑資料ID != value))
				{
					this.On醫囑資料IDChanging(value);
					this.SendPropertyChanging();
					this._醫囑資料ID = value;
					this.SendPropertyChanged("醫囑資料ID");
					this.On醫囑資料IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_掛號資料ID", DbType="Int NOT NULL")]
		public int 掛號資料ID
		{
			get
			{
				return this._掛號資料ID;
			}
			set
			{
				if ((this._掛號資料ID != value))
				{
					if (this._RegisterInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On掛號資料IDChanging(value);
					this.SendPropertyChanging();
					this._掛號資料ID = value;
					this.SendPropertyChanged("掛號資料ID");
					this.On掛號資料IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_診斷", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string 診斷
		{
			get
			{
				return this._診斷;
			}
			set
			{
				if ((this._診斷 != value))
				{
					this.On診斷Changing(value);
					this.SendPropertyChanging();
					this._診斷 = value;
					this.SendPropertyChanged("診斷");
					this.On診斷Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_下次看診日期", DbType="Date")]
		public System.Nullable<System.DateTime> 下次看診日期
		{
			get
			{
				return this._下次看診日期;
			}
			set
			{
				if ((this._下次看診日期 != value))
				{
					this.On下次看診日期Changing(value);
					this.SendPropertyChanging();
					this._下次看診日期 = value;
					this.SendPropertyChanged("下次看診日期");
					this.On下次看診日期Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_醫生ID", DbType="Int NOT NULL")]
		public int 醫生ID
		{
			get
			{
				return this._醫生ID;
			}
			set
			{
				if ((this._醫生ID != value))
				{
					this.On醫生IDChanging(value);
					this.SendPropertyChanging();
					this._醫生ID = value;
					this.SendPropertyChanged("醫生ID");
					this.On醫生IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_護理師ID", DbType="Int NOT NULL")]
		public int 護理師ID
		{
			get
			{
				return this._護理師ID;
			}
			set
			{
				if ((this._護理師ID != value))
				{
					this.On護理師IDChanging(value);
					this.SendPropertyChanging();
					this._護理師ID = value;
					this.SendPropertyChanged("護理師ID");
					this.On護理師IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_諮詢師ID", DbType="Int NOT NULL")]
		public int 諮詢師ID
		{
			get
			{
				return this._諮詢師ID;
			}
			set
			{
				if ((this._諮詢師ID != value))
				{
					this.On諮詢師IDChanging(value);
					this.SendPropertyChanging();
					this._諮詢師ID = value;
					this.SendPropertyChanged("諮詢師ID");
					this.On諮詢師IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_提醒天數ID", DbType="Int NOT NULL")]
		public int 提醒天數ID
		{
			get
			{
				return this._提醒天數ID;
			}
			set
			{
				if ((this._提醒天數ID != value))
				{
					this.On提醒天數IDChanging(value);
					this.SendPropertyChanging();
					this._提醒天數ID = value;
					this.SendPropertyChanged("提醒天數ID");
					this.On提醒天數IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosi_ExamSchedule", Storage="_ExamSchedules", ThisKey="醫囑資料ID", OtherKey="醫囑資料ID")]
		public EntitySet<ExamSchedule> ExamSchedules
		{
			get
			{
				return this._ExamSchedules;
			}
			set
			{
				this._ExamSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosi_DrugSchedule", Storage="_DrugSchedules", ThisKey="醫囑資料ID", OtherKey="醫囑資料ID")]
		public EntitySet<DrugSchedule> DrugSchedules
		{
			get
			{
				return this._DrugSchedules;
			}
			set
			{
				this._DrugSchedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegisterInformation_Diagnosi", Storage="_RegisterInformation", ThisKey="掛號資料ID", OtherKey="掛號資料ID", IsForeignKey=true)]
		public RegisterInformation RegisterInformation
		{
			get
			{
				return this._RegisterInformation.Entity;
			}
			set
			{
				RegisterInformation previousValue = this._RegisterInformation.Entity;
				if (((previousValue != value) 
							|| (this._RegisterInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegisterInformation.Entity = null;
						previousValue.Diagnosis.Remove(this);
					}
					this._RegisterInformation.Entity = value;
					if ((value != null))
					{
						value.Diagnosis.Add(this);
						this._掛號資料ID = value.掛號資料ID;
					}
					else
					{
						this._掛號資料ID = default(int);
					}
					this.SendPropertyChanged("RegisterInformation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamSchedules(ExamSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Diagnosi = this;
		}
		
		private void detach_ExamSchedules(ExamSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Diagnosi = null;
		}
		
		private void attach_DrugSchedules(DrugSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Diagnosi = this;
		}
		
		private void detach_DrugSchedules(DrugSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Diagnosi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamSchedules")]
	public partial class ExamSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _排程ID;
		
		private System.Nullable<int> _醫囑資料ID;
		
		private System.Nullable<int> _檢驗項目ID;
		
		private int _檢驗頻率ID;
		
		private System.DateTime _起始日期;
		
		private System.Nullable<System.DateTime> _結束日期;
		
		private string _備註;
		
		private System.Nullable<bool> _結案;
		
		private string _結案原因;
		
		private EntitySet<ExamCalender> _ExamCalenders;
		
		private EntityRef<Diagnosi> _Diagnosi;
		
		private EntityRef<ExamFrequency> _ExamFrequency;
		
		private EntityRef<ExamOverview> _ExamOverview;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On排程IDChanging(int value);
    partial void On排程IDChanged();
    partial void On醫囑資料IDChanging(System.Nullable<int> value);
    partial void On醫囑資料IDChanged();
    partial void On檢驗項目IDChanging(System.Nullable<int> value);
    partial void On檢驗項目IDChanged();
    partial void On檢驗頻率IDChanging(int value);
    partial void On檢驗頻率IDChanged();
    partial void On起始日期Changing(System.DateTime value);
    partial void On起始日期Changed();
    partial void On結束日期Changing(System.Nullable<System.DateTime> value);
    partial void On結束日期Changed();
    partial void On備註Changing(string value);
    partial void On備註Changed();
    partial void On結案Changing(System.Nullable<bool> value);
    partial void On結案Changed();
    partial void On結案原因Changing(string value);
    partial void On結案原因Changed();
    #endregion
		
		public ExamSchedule()
		{
			this._ExamCalenders = new EntitySet<ExamCalender>(new Action<ExamCalender>(this.attach_ExamCalenders), new Action<ExamCalender>(this.detach_ExamCalenders));
			this._Diagnosi = default(EntityRef<Diagnosi>);
			this._ExamFrequency = default(EntityRef<ExamFrequency>);
			this._ExamOverview = default(EntityRef<ExamOverview>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_排程ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 排程ID
		{
			get
			{
				return this._排程ID;
			}
			set
			{
				if ((this._排程ID != value))
				{
					this.On排程IDChanging(value);
					this.SendPropertyChanging();
					this._排程ID = value;
					this.SendPropertyChanged("排程ID");
					this.On排程IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_醫囑資料ID", DbType="Int")]
		public System.Nullable<int> 醫囑資料ID
		{
			get
			{
				return this._醫囑資料ID;
			}
			set
			{
				if ((this._醫囑資料ID != value))
				{
					if (this._Diagnosi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On醫囑資料IDChanging(value);
					this.SendPropertyChanging();
					this._醫囑資料ID = value;
					this.SendPropertyChanged("醫囑資料ID");
					this.On醫囑資料IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗項目ID", DbType="Int")]
		public System.Nullable<int> 檢驗項目ID
		{
			get
			{
				return this._檢驗項目ID;
			}
			set
			{
				if ((this._檢驗項目ID != value))
				{
					if (this._ExamOverview.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On檢驗項目IDChanging(value);
					this.SendPropertyChanging();
					this._檢驗項目ID = value;
					this.SendPropertyChanged("檢驗項目ID");
					this.On檢驗項目IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗頻率ID", DbType="Int NOT NULL")]
		public int 檢驗頻率ID
		{
			get
			{
				return this._檢驗頻率ID;
			}
			set
			{
				if ((this._檢驗頻率ID != value))
				{
					if (this._ExamFrequency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On檢驗頻率IDChanging(value);
					this.SendPropertyChanging();
					this._檢驗頻率ID = value;
					this.SendPropertyChanged("檢驗頻率ID");
					this.On檢驗頻率IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_起始日期", DbType="Date NOT NULL")]
		public System.DateTime 起始日期
		{
			get
			{
				return this._起始日期;
			}
			set
			{
				if ((this._起始日期 != value))
				{
					this.On起始日期Changing(value);
					this.SendPropertyChanging();
					this._起始日期 = value;
					this.SendPropertyChanged("起始日期");
					this.On起始日期Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結束日期", DbType="Date")]
		public System.Nullable<System.DateTime> 結束日期
		{
			get
			{
				return this._結束日期;
			}
			set
			{
				if ((this._結束日期 != value))
				{
					this.On結束日期Changing(value);
					this.SendPropertyChanging();
					this._結束日期 = value;
					this.SendPropertyChanged("結束日期");
					this.On結束日期Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
		public string 備註
		{
			get
			{
				return this._備註;
			}
			set
			{
				if ((this._備註 != value))
				{
					this.On備註Changing(value);
					this.SendPropertyChanging();
					this._備註 = value;
					this.SendPropertyChanged("備註");
					this.On備註Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案", DbType="Bit")]
		public System.Nullable<bool> 結案
		{
			get
			{
				return this._結案;
			}
			set
			{
				if ((this._結案 != value))
				{
					this.On結案Changing(value);
					this.SendPropertyChanging();
					this._結案 = value;
					this.SendPropertyChanged("結案");
					this.On結案Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案原因", DbType="NVarChar(MAX)")]
		public string 結案原因
		{
			get
			{
				return this._結案原因;
			}
			set
			{
				if ((this._結案原因 != value))
				{
					this.On結案原因Changing(value);
					this.SendPropertyChanging();
					this._結案原因 = value;
					this.SendPropertyChanged("結案原因");
					this.On結案原因Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamSchedule_ExamCalender", Storage="_ExamCalenders", ThisKey="排程ID", OtherKey="排程ID")]
		public EntitySet<ExamCalender> ExamCalenders
		{
			get
			{
				return this._ExamCalenders;
			}
			set
			{
				this._ExamCalenders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosi_ExamSchedule", Storage="_Diagnosi", ThisKey="醫囑資料ID", OtherKey="醫囑資料ID", IsForeignKey=true)]
		public Diagnosi Diagnosi
		{
			get
			{
				return this._Diagnosi.Entity;
			}
			set
			{
				Diagnosi previousValue = this._Diagnosi.Entity;
				if (((previousValue != value) 
							|| (this._Diagnosi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Diagnosi.Entity = null;
						previousValue.ExamSchedules.Remove(this);
					}
					this._Diagnosi.Entity = value;
					if ((value != null))
					{
						value.ExamSchedules.Add(this);
						this._醫囑資料ID = value.醫囑資料ID;
					}
					else
					{
						this._醫囑資料ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Diagnosi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamFrequency_ExamSchedule", Storage="_ExamFrequency", ThisKey="檢驗頻率ID", OtherKey="檢驗頻率ID", IsForeignKey=true)]
		public ExamFrequency ExamFrequency
		{
			get
			{
				return this._ExamFrequency.Entity;
			}
			set
			{
				ExamFrequency previousValue = this._ExamFrequency.Entity;
				if (((previousValue != value) 
							|| (this._ExamFrequency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamFrequency.Entity = null;
						previousValue.ExamSchedules.Remove(this);
					}
					this._ExamFrequency.Entity = value;
					if ((value != null))
					{
						value.ExamSchedules.Add(this);
						this._檢驗頻率ID = value.檢驗頻率ID;
					}
					else
					{
						this._檢驗頻率ID = default(int);
					}
					this.SendPropertyChanged("ExamFrequency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamOverview_ExamSchedule", Storage="_ExamOverview", ThisKey="檢驗項目ID", OtherKey="檢驗項目ID", IsForeignKey=true)]
		public ExamOverview ExamOverview
		{
			get
			{
				return this._ExamOverview.Entity;
			}
			set
			{
				ExamOverview previousValue = this._ExamOverview.Entity;
				if (((previousValue != value) 
							|| (this._ExamOverview.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamOverview.Entity = null;
						previousValue.ExamSchedule.Remove(this);
					}
					this._ExamOverview.Entity = value;
					if ((value != null))
					{
						value.ExamSchedule.Add(this);
						this._檢驗項目ID = value.檢驗項目ID;
					}
					else
					{
						this._檢驗項目ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ExamOverview");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamCalenders(ExamCalender entity)
		{
			this.SendPropertyChanging();
			entity.ExamSchedule = this;
		}
		
		private void detach_ExamCalenders(ExamCalender entity)
		{
			this.SendPropertyChanging();
			entity.ExamSchedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamOverview")]
	public partial class ExamOverview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _檢驗項目ID;
		
		private string _項目_英文名稱_;
		
		private string _中文名稱;
		
		private string _性別;
		
		private string _單位;
		
		private string _檢驗正常值_上限_;
		
		private string _檢驗正常值_下限_;
		
		private decimal _危險百分比;
		
		private int _檢驗類別ID;
		
		private EntitySet<ExamSchedule> _ExamSchedule;
		
		private EntityRef<ExamCategories> _ExamCategories;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On檢驗項目IDChanging(int value);
    partial void On檢驗項目IDChanged();
    partial void On項目_英文名稱_Changing(string value);
    partial void On項目_英文名稱_Changed();
    partial void On中文名稱Changing(string value);
    partial void On中文名稱Changed();
    partial void On性別Changing(string value);
    partial void On性別Changed();
    partial void On單位Changing(string value);
    partial void On單位Changed();
    partial void On檢驗正常值_上限_Changing(string value);
    partial void On檢驗正常值_上限_Changed();
    partial void On檢驗正常值_下限_Changing(string value);
    partial void On檢驗正常值_下限_Changed();
    partial void On危險百分比Changing(decimal value);
    partial void On危險百分比Changed();
    partial void On檢驗類別IDChanging(int value);
    partial void On檢驗類別IDChanged();
    #endregion
		
		public ExamOverview()
		{
			this._ExamSchedule = new EntitySet<ExamSchedule>(new Action<ExamSchedule>(this.attach_ExamSchedule), new Action<ExamSchedule>(this.detach_ExamSchedule));
			this._ExamCategories = default(EntityRef<ExamCategories>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗項目ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 檢驗項目ID
		{
			get
			{
				return this._檢驗項目ID;
			}
			set
			{
				if ((this._檢驗項目ID != value))
				{
					this.On檢驗項目IDChanging(value);
					this.SendPropertyChanging();
					this._檢驗項目ID = value;
					this.SendPropertyChanged("檢驗項目ID");
					this.On檢驗項目IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[項目(英文名稱)]", Storage="_項目_英文名稱_", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 項目_英文名稱_
		{
			get
			{
				return this._項目_英文名稱_;
			}
			set
			{
				if ((this._項目_英文名稱_ != value))
				{
					this.On項目_英文名稱_Changing(value);
					this.SendPropertyChanging();
					this._項目_英文名稱_ = value;
					this.SendPropertyChanged("項目_英文名稱_");
					this.On項目_英文名稱_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_中文名稱", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 中文名稱
		{
			get
			{
				return this._中文名稱;
			}
			set
			{
				if ((this._中文名稱 != value))
				{
					this.On中文名稱Changing(value);
					this.SendPropertyChanging();
					this._中文名稱 = value;
					this.SendPropertyChanged("中文名稱");
					this.On中文名稱Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_性別", DbType="NVarChar(1)")]
		public string 性別
		{
			get
			{
				return this._性別;
			}
			set
			{
				if ((this._性別 != value))
				{
					this.On性別Changing(value);
					this.SendPropertyChanging();
					this._性別 = value;
					this.SendPropertyChanged("性別");
					this.On性別Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_單位", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string 單位
		{
			get
			{
				return this._單位;
			}
			set
			{
				if ((this._單位 != value))
				{
					this.On單位Changing(value);
					this.SendPropertyChanging();
					this._單位 = value;
					this.SendPropertyChanged("單位");
					this.On單位Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[檢驗正常值(上限)]", Storage="_檢驗正常值_上限_", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string 檢驗正常值_上限_
		{
			get
			{
				return this._檢驗正常值_上限_;
			}
			set
			{
				if ((this._檢驗正常值_上限_ != value))
				{
					this.On檢驗正常值_上限_Changing(value);
					this.SendPropertyChanging();
					this._檢驗正常值_上限_ = value;
					this.SendPropertyChanged("檢驗正常值_上限_");
					this.On檢驗正常值_上限_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[檢驗正常值(下限)]", Storage="_檢驗正常值_下限_", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string 檢驗正常值_下限_
		{
			get
			{
				return this._檢驗正常值_下限_;
			}
			set
			{
				if ((this._檢驗正常值_下限_ != value))
				{
					this.On檢驗正常值_下限_Changing(value);
					this.SendPropertyChanging();
					this._檢驗正常值_下限_ = value;
					this.SendPropertyChanged("檢驗正常值_下限_");
					this.On檢驗正常值_下限_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_危險百分比", DbType="Decimal(5,0) NOT NULL")]
		public decimal 危險百分比
		{
			get
			{
				return this._危險百分比;
			}
			set
			{
				if ((this._危險百分比 != value))
				{
					this.On危險百分比Changing(value);
					this.SendPropertyChanging();
					this._危險百分比 = value;
					this.SendPropertyChanged("危險百分比");
					this.On危險百分比Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗類別ID", DbType="Int NOT NULL")]
		public int 檢驗類別ID
		{
			get
			{
				return this._檢驗類別ID;
			}
			set
			{
				if ((this._檢驗類別ID != value))
				{
					if (this._ExamCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On檢驗類別IDChanging(value);
					this.SendPropertyChanging();
					this._檢驗類別ID = value;
					this.SendPropertyChanged("檢驗類別ID");
					this.On檢驗類別IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamOverview_ExamSchedule", Storage="_ExamSchedule", ThisKey="檢驗項目ID", OtherKey="檢驗項目ID")]
		public EntitySet<ExamSchedule> ExamSchedule
		{
			get
			{
				return this._ExamSchedule;
			}
			set
			{
				this._ExamSchedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamCategories_ExamOverview", Storage="_ExamCategories", ThisKey="檢驗類別ID", OtherKey="檢驗類別ID", IsForeignKey=true)]
		public ExamCategories ExamCategories
		{
			get
			{
				return this._ExamCategories.Entity;
			}
			set
			{
				ExamCategories previousValue = this._ExamCategories.Entity;
				if (((previousValue != value) 
							|| (this._ExamCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamCategories.Entity = null;
						previousValue.ExamOverview.Remove(this);
					}
					this._ExamCategories.Entity = value;
					if ((value != null))
					{
						value.ExamOverview.Add(this);
						this._檢驗類別ID = value.檢驗類別ID;
					}
					else
					{
						this._檢驗類別ID = default(int);
					}
					this.SendPropertyChanged("ExamCategories");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamSchedule(ExamSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ExamOverview = this;
		}
		
		private void detach_ExamSchedule(ExamSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ExamOverview = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_ExamSchedules")]
	public partial class View_ExamSchedules
	{
		
		private int _ID;
		
		private System.Nullable<int> _病歷號碼;
		
		private string _姓名;
		
		private string _檢驗名稱;
		
		private string _檢驗頻率;
		
		private System.DateTime _起始日期;
		
		private System.Nullable<System.DateTime> _結束日期;
		
		private string _備註;
		
		private System.Nullable<bool> _結案;
		
		private string _結案原因;
		
		public View_ExamSchedules()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病歷號碼", DbType="Int")]
		public System.Nullable<int> 病歷號碼
		{
			get
			{
				return this._病歷號碼;
			}
			set
			{
				if ((this._病歷號碼 != value))
				{
					this._病歷號碼 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_姓名", DbType="NVarChar(10)")]
		public string 姓名
		{
			get
			{
				return this._姓名;
			}
			set
			{
				if ((this._姓名 != value))
				{
					this._姓名 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗名稱", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 檢驗名稱
		{
			get
			{
				return this._檢驗名稱;
			}
			set
			{
				if ((this._檢驗名稱 != value))
				{
					this._檢驗名稱 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗頻率", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 檢驗頻率
		{
			get
			{
				return this._檢驗頻率;
			}
			set
			{
				if ((this._檢驗頻率 != value))
				{
					this._檢驗頻率 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_起始日期", DbType="Date NOT NULL")]
		public System.DateTime 起始日期
		{
			get
			{
				return this._起始日期;
			}
			set
			{
				if ((this._起始日期 != value))
				{
					this._起始日期 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結束日期", DbType="Date")]
		public System.Nullable<System.DateTime> 結束日期
		{
			get
			{
				return this._結束日期;
			}
			set
			{
				if ((this._結束日期 != value))
				{
					this._結束日期 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
		public string 備註
		{
			get
			{
				return this._備註;
			}
			set
			{
				if ((this._備註 != value))
				{
					this._備註 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案", DbType="Bit")]
		public System.Nullable<bool> 結案
		{
			get
			{
				return this._結案;
			}
			set
			{
				if ((this._結案 != value))
				{
					this._結案 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案原因", DbType="NVarChar(MAX)")]
		public string 結案原因
		{
			get
			{
				return this._結案原因;
			}
			set
			{
				if ((this._結案原因 != value))
				{
					this._結案原因 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugOverview")]
	public partial class DrugOverview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _藥物ID;
		
		private string _項目_英文名稱_;
		
		private string _中文名稱;
		
		private string _藥品單位含量;
		
		private string _使用方法;
		
		private string _使用劑量;
		
		private string _藥品外觀;
		
		private string _適應症;
		
		private string _副作用;
		
		private string _警語;
		
		private string _用藥指示;
		
		private System.Nullable<bool> _特殊與否;
		
		private EntitySet<DrugSchedule> _DrugSchedules;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On藥物IDChanging(int value);
    partial void On藥物IDChanged();
    partial void On項目_英文名稱_Changing(string value);
    partial void On項目_英文名稱_Changed();
    partial void On中文名稱Changing(string value);
    partial void On中文名稱Changed();
    partial void On藥品單位含量Changing(string value);
    partial void On藥品單位含量Changed();
    partial void On使用方法Changing(string value);
    partial void On使用方法Changed();
    partial void On使用劑量Changing(string value);
    partial void On使用劑量Changed();
    partial void On藥品外觀Changing(string value);
    partial void On藥品外觀Changed();
    partial void On適應症Changing(string value);
    partial void On適應症Changed();
    partial void On副作用Changing(string value);
    partial void On副作用Changed();
    partial void On警語Changing(string value);
    partial void On警語Changed();
    partial void On用藥指示Changing(string value);
    partial void On用藥指示Changed();
    partial void On特殊與否Changing(System.Nullable<bool> value);
    partial void On特殊與否Changed();
    #endregion
		
		public DrugOverview()
		{
			this._DrugSchedules = new EntitySet<DrugSchedule>(new Action<DrugSchedule>(this.attach_DrugSchedules), new Action<DrugSchedule>(this.detach_DrugSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_藥物ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 藥物ID
		{
			get
			{
				return this._藥物ID;
			}
			set
			{
				if ((this._藥物ID != value))
				{
					this.On藥物IDChanging(value);
					this.SendPropertyChanging();
					this._藥物ID = value;
					this.SendPropertyChanged("藥物ID");
					this.On藥物IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[項目(英文名稱)]", Storage="_項目_英文名稱_", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 項目_英文名稱_
		{
			get
			{
				return this._項目_英文名稱_;
			}
			set
			{
				if ((this._項目_英文名稱_ != value))
				{
					this.On項目_英文名稱_Changing(value);
					this.SendPropertyChanging();
					this._項目_英文名稱_ = value;
					this.SendPropertyChanged("項目_英文名稱_");
					this.On項目_英文名稱_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_中文名稱", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 中文名稱
		{
			get
			{
				return this._中文名稱;
			}
			set
			{
				if ((this._中文名稱 != value))
				{
					this.On中文名稱Changing(value);
					this.SendPropertyChanging();
					this._中文名稱 = value;
					this.SendPropertyChanged("中文名稱");
					this.On中文名稱Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_藥品單位含量", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string 藥品單位含量
		{
			get
			{
				return this._藥品單位含量;
			}
			set
			{
				if ((this._藥品單位含量 != value))
				{
					this.On藥品單位含量Changing(value);
					this.SendPropertyChanging();
					this._藥品單位含量 = value;
					this.SendPropertyChanged("藥品單位含量");
					this.On藥品單位含量Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_使用方法", DbType="NVarChar(50)")]
		public string 使用方法
		{
			get
			{
				return this._使用方法;
			}
			set
			{
				if ((this._使用方法 != value))
				{
					this.On使用方法Changing(value);
					this.SendPropertyChanging();
					this._使用方法 = value;
					this.SendPropertyChanged("使用方法");
					this.On使用方法Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_使用劑量", DbType="NVarChar(10)")]
		public string 使用劑量
		{
			get
			{
				return this._使用劑量;
			}
			set
			{
				if ((this._使用劑量 != value))
				{
					this.On使用劑量Changing(value);
					this.SendPropertyChanging();
					this._使用劑量 = value;
					this.SendPropertyChanged("使用劑量");
					this.On使用劑量Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_藥品外觀", DbType="NVarChar(50)")]
		public string 藥品外觀
		{
			get
			{
				return this._藥品外觀;
			}
			set
			{
				if ((this._藥品外觀 != value))
				{
					this.On藥品外觀Changing(value);
					this.SendPropertyChanging();
					this._藥品外觀 = value;
					this.SendPropertyChanged("藥品外觀");
					this.On藥品外觀Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_適應症", DbType="NVarChar(50)")]
		public string 適應症
		{
			get
			{
				return this._適應症;
			}
			set
			{
				if ((this._適應症 != value))
				{
					this.On適應症Changing(value);
					this.SendPropertyChanging();
					this._適應症 = value;
					this.SendPropertyChanged("適應症");
					this.On適應症Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_副作用", DbType="NVarChar(50)")]
		public string 副作用
		{
			get
			{
				return this._副作用;
			}
			set
			{
				if ((this._副作用 != value))
				{
					this.On副作用Changing(value);
					this.SendPropertyChanging();
					this._副作用 = value;
					this.SendPropertyChanged("副作用");
					this.On副作用Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_警語", DbType="NVarChar(50)")]
		public string 警語
		{
			get
			{
				return this._警語;
			}
			set
			{
				if ((this._警語 != value))
				{
					this.On警語Changing(value);
					this.SendPropertyChanging();
					this._警語 = value;
					this.SendPropertyChanged("警語");
					this.On警語Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用藥指示", DbType="NVarChar(50)")]
		public string 用藥指示
		{
			get
			{
				return this._用藥指示;
			}
			set
			{
				if ((this._用藥指示 != value))
				{
					this.On用藥指示Changing(value);
					this.SendPropertyChanging();
					this._用藥指示 = value;
					this.SendPropertyChanged("用藥指示");
					this.On用藥指示Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_特殊與否", DbType="Bit")]
		public System.Nullable<bool> 特殊與否
		{
			get
			{
				return this._特殊與否;
			}
			set
			{
				if ((this._特殊與否 != value))
				{
					this.On特殊與否Changing(value);
					this.SendPropertyChanging();
					this._特殊與否 = value;
					this.SendPropertyChanged("特殊與否");
					this.On特殊與否Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugOverview_DrugSchedule", Storage="_DrugSchedules", ThisKey="藥物ID", OtherKey="藥物ID")]
		public EntitySet<DrugSchedule> DrugSchedules
		{
			get
			{
				return this._DrugSchedules;
			}
			set
			{
				this._DrugSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrugSchedules(DrugSchedule entity)
		{
			this.SendPropertyChanging();
			entity.DrugOverview = this;
		}
		
		private void detach_DrugSchedules(DrugSchedule entity)
		{
			this.SendPropertyChanging();
			entity.DrugOverview = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugSchedules")]
	public partial class DrugSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _用藥排程ID;
		
		private System.Nullable<int> _醫囑資料ID;
		
		private System.Nullable<int> _藥物ID;
		
		private int _用藥頻率ID;
		
		private System.DateTime _起始日期;
		
		private System.Nullable<System.DateTime> _結束日期;
		
		private string _備註;
		
		private System.Nullable<bool> _結案;
		
		private string _結案原因;
		
		private EntityRef<Diagnosi> _Diagnosi;
		
		private EntityRef<DrugOverview> _DrugOverview;
		
		private EntityRef<DrugFrequency> _DrugFrequency;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On用藥排程IDChanging(int value);
    partial void On用藥排程IDChanged();
    partial void On醫囑資料IDChanging(System.Nullable<int> value);
    partial void On醫囑資料IDChanged();
    partial void On藥物IDChanging(System.Nullable<int> value);
    partial void On藥物IDChanged();
    partial void On用藥頻率IDChanging(int value);
    partial void On用藥頻率IDChanged();
    partial void On起始日期Changing(System.DateTime value);
    partial void On起始日期Changed();
    partial void On結束日期Changing(System.Nullable<System.DateTime> value);
    partial void On結束日期Changed();
    partial void On備註Changing(string value);
    partial void On備註Changed();
    partial void On結案Changing(System.Nullable<bool> value);
    partial void On結案Changed();
    partial void On結案原因Changing(string value);
    partial void On結案原因Changed();
    #endregion
		
		public DrugSchedule()
		{
			this._Diagnosi = default(EntityRef<Diagnosi>);
			this._DrugOverview = default(EntityRef<DrugOverview>);
			this._DrugFrequency = default(EntityRef<DrugFrequency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用藥排程ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 用藥排程ID
		{
			get
			{
				return this._用藥排程ID;
			}
			set
			{
				if ((this._用藥排程ID != value))
				{
					this.On用藥排程IDChanging(value);
					this.SendPropertyChanging();
					this._用藥排程ID = value;
					this.SendPropertyChanged("用藥排程ID");
					this.On用藥排程IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_醫囑資料ID", DbType="Int")]
		public System.Nullable<int> 醫囑資料ID
		{
			get
			{
				return this._醫囑資料ID;
			}
			set
			{
				if ((this._醫囑資料ID != value))
				{
					if (this._Diagnosi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On醫囑資料IDChanging(value);
					this.SendPropertyChanging();
					this._醫囑資料ID = value;
					this.SendPropertyChanged("醫囑資料ID");
					this.On醫囑資料IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_藥物ID", DbType="Int")]
		public System.Nullable<int> 藥物ID
		{
			get
			{
				return this._藥物ID;
			}
			set
			{
				if ((this._藥物ID != value))
				{
					if (this._DrugOverview.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On藥物IDChanging(value);
					this.SendPropertyChanging();
					this._藥物ID = value;
					this.SendPropertyChanged("藥物ID");
					this.On藥物IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用藥頻率ID", DbType="Int NOT NULL")]
		public int 用藥頻率ID
		{
			get
			{
				return this._用藥頻率ID;
			}
			set
			{
				if ((this._用藥頻率ID != value))
				{
					if (this._DrugFrequency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On用藥頻率IDChanging(value);
					this.SendPropertyChanging();
					this._用藥頻率ID = value;
					this.SendPropertyChanged("用藥頻率ID");
					this.On用藥頻率IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_起始日期", DbType="Date NOT NULL")]
		public System.DateTime 起始日期
		{
			get
			{
				return this._起始日期;
			}
			set
			{
				if ((this._起始日期 != value))
				{
					this.On起始日期Changing(value);
					this.SendPropertyChanging();
					this._起始日期 = value;
					this.SendPropertyChanged("起始日期");
					this.On起始日期Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結束日期", DbType="Date")]
		public System.Nullable<System.DateTime> 結束日期
		{
			get
			{
				return this._結束日期;
			}
			set
			{
				if ((this._結束日期 != value))
				{
					this.On結束日期Changing(value);
					this.SendPropertyChanging();
					this._結束日期 = value;
					this.SendPropertyChanged("結束日期");
					this.On結束日期Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
		public string 備註
		{
			get
			{
				return this._備註;
			}
			set
			{
				if ((this._備註 != value))
				{
					this.On備註Changing(value);
					this.SendPropertyChanging();
					this._備註 = value;
					this.SendPropertyChanged("備註");
					this.On備註Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案", DbType="Bit")]
		public System.Nullable<bool> 結案
		{
			get
			{
				return this._結案;
			}
			set
			{
				if ((this._結案 != value))
				{
					this.On結案Changing(value);
					this.SendPropertyChanging();
					this._結案 = value;
					this.SendPropertyChanged("結案");
					this.On結案Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案原因", DbType="NVarChar(MAX)")]
		public string 結案原因
		{
			get
			{
				return this._結案原因;
			}
			set
			{
				if ((this._結案原因 != value))
				{
					this.On結案原因Changing(value);
					this.SendPropertyChanging();
					this._結案原因 = value;
					this.SendPropertyChanged("結案原因");
					this.On結案原因Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Diagnosi_DrugSchedule", Storage="_Diagnosi", ThisKey="醫囑資料ID", OtherKey="醫囑資料ID", IsForeignKey=true)]
		public Diagnosi Diagnosi
		{
			get
			{
				return this._Diagnosi.Entity;
			}
			set
			{
				Diagnosi previousValue = this._Diagnosi.Entity;
				if (((previousValue != value) 
							|| (this._Diagnosi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Diagnosi.Entity = null;
						previousValue.DrugSchedules.Remove(this);
					}
					this._Diagnosi.Entity = value;
					if ((value != null))
					{
						value.DrugSchedules.Add(this);
						this._醫囑資料ID = value.醫囑資料ID;
					}
					else
					{
						this._醫囑資料ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Diagnosi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugOverview_DrugSchedule", Storage="_DrugOverview", ThisKey="藥物ID", OtherKey="藥物ID", IsForeignKey=true)]
		public DrugOverview DrugOverview
		{
			get
			{
				return this._DrugOverview.Entity;
			}
			set
			{
				DrugOverview previousValue = this._DrugOverview.Entity;
				if (((previousValue != value) 
							|| (this._DrugOverview.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrugOverview.Entity = null;
						previousValue.DrugSchedules.Remove(this);
					}
					this._DrugOverview.Entity = value;
					if ((value != null))
					{
						value.DrugSchedules.Add(this);
						this._藥物ID = value.藥物ID;
					}
					else
					{
						this._藥物ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("DrugOverview");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugFrequency_DrugSchedule", Storage="_DrugFrequency", ThisKey="用藥頻率ID", OtherKey="用藥頻率ID", IsForeignKey=true)]
		public DrugFrequency DrugFrequency
		{
			get
			{
				return this._DrugFrequency.Entity;
			}
			set
			{
				DrugFrequency previousValue = this._DrugFrequency.Entity;
				if (((previousValue != value) 
							|| (this._DrugFrequency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DrugFrequency.Entity = null;
						previousValue.DrugSchedules.Remove(this);
					}
					this._DrugFrequency.Entity = value;
					if ((value != null))
					{
						value.DrugSchedules.Add(this);
						this._用藥頻率ID = value.用藥頻率ID;
					}
					else
					{
						this._用藥頻率ID = default(int);
					}
					this.SendPropertyChanged("DrugFrequency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DrugFrequencies")]
	public partial class DrugFrequency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _用藥頻率ID;
		
		private string _用藥頻率;
		
		private System.Nullable<System.DateTime> _轉換天數;
		
		private EntitySet<DrugSchedule> _DrugSchedules;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On用藥頻率IDChanging(int value);
    partial void On用藥頻率IDChanged();
    partial void On用藥頻率Changing(string value);
    partial void On用藥頻率Changed();
    partial void On轉換天數Changing(System.Nullable<System.DateTime> value);
    partial void On轉換天數Changed();
    #endregion
		
		public DrugFrequency()
		{
			this._DrugSchedules = new EntitySet<DrugSchedule>(new Action<DrugSchedule>(this.attach_DrugSchedules), new Action<DrugSchedule>(this.detach_DrugSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用藥頻率ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 用藥頻率ID
		{
			get
			{
				return this._用藥頻率ID;
			}
			set
			{
				if ((this._用藥頻率ID != value))
				{
					this.On用藥頻率IDChanging(value);
					this.SendPropertyChanging();
					this._用藥頻率ID = value;
					this.SendPropertyChanged("用藥頻率ID");
					this.On用藥頻率IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_用藥頻率", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 用藥頻率
		{
			get
			{
				return this._用藥頻率;
			}
			set
			{
				if ((this._用藥頻率 != value))
				{
					this.On用藥頻率Changing(value);
					this.SendPropertyChanging();
					this._用藥頻率 = value;
					this.SendPropertyChanged("用藥頻率");
					this.On用藥頻率Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_轉換天數", DbType="Date")]
		public System.Nullable<System.DateTime> 轉換天數
		{
			get
			{
				return this._轉換天數;
			}
			set
			{
				if ((this._轉換天數 != value))
				{
					this.On轉換天數Changing(value);
					this.SendPropertyChanging();
					this._轉換天數 = value;
					this.SendPropertyChanged("轉換天數");
					this.On轉換天數Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DrugFrequency_DrugSchedule", Storage="_DrugSchedules", ThisKey="用藥頻率ID", OtherKey="用藥頻率ID")]
		public EntitySet<DrugSchedule> DrugSchedules
		{
			get
			{
				return this._DrugSchedules;
			}
			set
			{
				this._DrugSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DrugSchedules(DrugSchedule entity)
		{
			this.SendPropertyChanging();
			entity.DrugFrequency = this;
		}
		
		private void detach_DrugSchedules(DrugSchedule entity)
		{
			this.SendPropertyChanging();
			entity.DrugFrequency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_DrugSchedule")]
	public partial class View_DrugSchedule
	{
		
		private int _ID;
		
		private System.Nullable<int> _病歷號碼;
		
		private string _姓名;
		
		private string _藥物名稱;
		
		private string _使用頻率;
		
		private System.DateTime _起始日期;
		
		private System.Nullable<System.DateTime> _結束日期;
		
		private string _備註;
		
		private System.Nullable<bool> _結案;
		
		private string _結案原因;
		
		public View_DrugSchedule()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病歷號碼", DbType="Int")]
		public System.Nullable<int> 病歷號碼
		{
			get
			{
				return this._病歷號碼;
			}
			set
			{
				if ((this._病歷號碼 != value))
				{
					this._病歷號碼 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_姓名", DbType="NVarChar(10)")]
		public string 姓名
		{
			get
			{
				return this._姓名;
			}
			set
			{
				if ((this._姓名 != value))
				{
					this._姓名 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_藥物名稱", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 藥物名稱
		{
			get
			{
				return this._藥物名稱;
			}
			set
			{
				if ((this._藥物名稱 != value))
				{
					this._藥物名稱 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_使用頻率", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 使用頻率
		{
			get
			{
				return this._使用頻率;
			}
			set
			{
				if ((this._使用頻率 != value))
				{
					this._使用頻率 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_起始日期", DbType="Date NOT NULL")]
		public System.DateTime 起始日期
		{
			get
			{
				return this._起始日期;
			}
			set
			{
				if ((this._起始日期 != value))
				{
					this._起始日期 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結束日期", DbType="Date")]
		public System.Nullable<System.DateTime> 結束日期
		{
			get
			{
				return this._結束日期;
			}
			set
			{
				if ((this._結束日期 != value))
				{
					this._結束日期 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
		public string 備註
		{
			get
			{
				return this._備註;
			}
			set
			{
				if ((this._備註 != value))
				{
					this._備註 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案", DbType="Bit")]
		public System.Nullable<bool> 結案
		{
			get
			{
				return this._結案;
			}
			set
			{
				if ((this._結案 != value))
				{
					this._結案 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結案原因", DbType="NVarChar(MAX)")]
		public string 結案原因
		{
			get
			{
				return this._結案原因;
			}
			set
			{
				if ((this._結案原因 != value))
				{
					this._結案原因 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamCalender")]
	public partial class ExamCalender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _行事曆ID;
		
		private int _排程ID;
		
		private int _狀態ID;
		
		private System.Nullable<int> _檢驗結果ID;
		
		private int _提醒天數ID;
		
		private System.Nullable<int> _時段ID;
		
		private System.DateTime _日期;
		
		private string _結果值;
		
		private string _備註;
		
		private System.Nullable<bool> _提醒了沒;
		
		private EntityRef<ExamSchedule> _ExamSchedule;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On行事曆IDChanging(int value);
    partial void On行事曆IDChanged();
    partial void On排程IDChanging(int value);
    partial void On排程IDChanged();
    partial void On狀態IDChanging(int value);
    partial void On狀態IDChanged();
    partial void On檢驗結果IDChanging(System.Nullable<int> value);
    partial void On檢驗結果IDChanged();
    partial void On提醒天數IDChanging(int value);
    partial void On提醒天數IDChanged();
    partial void On時段IDChanging(System.Nullable<int> value);
    partial void On時段IDChanged();
    partial void On日期Changing(System.DateTime value);
    partial void On日期Changed();
    partial void On結果值Changing(string value);
    partial void On結果值Changed();
    partial void On備註Changing(string value);
    partial void On備註Changed();
    partial void On提醒了沒Changing(System.Nullable<bool> value);
    partial void On提醒了沒Changed();
    #endregion
		
		public ExamCalender()
		{
			this._ExamSchedule = default(EntityRef<ExamSchedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_行事曆ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 行事曆ID
		{
			get
			{
				return this._行事曆ID;
			}
			set
			{
				if ((this._行事曆ID != value))
				{
					this.On行事曆IDChanging(value);
					this.SendPropertyChanging();
					this._行事曆ID = value;
					this.SendPropertyChanged("行事曆ID");
					this.On行事曆IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_排程ID", DbType="Int NOT NULL")]
		public int 排程ID
		{
			get
			{
				return this._排程ID;
			}
			set
			{
				if ((this._排程ID != value))
				{
					if (this._ExamSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.On排程IDChanging(value);
					this.SendPropertyChanging();
					this._排程ID = value;
					this.SendPropertyChanged("排程ID");
					this.On排程IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_狀態ID", DbType="Int NOT NULL")]
		public int 狀態ID
		{
			get
			{
				return this._狀態ID;
			}
			set
			{
				if ((this._狀態ID != value))
				{
					this.On狀態IDChanging(value);
					this.SendPropertyChanging();
					this._狀態ID = value;
					this.SendPropertyChanged("狀態ID");
					this.On狀態IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗結果ID", DbType="Int")]
		public System.Nullable<int> 檢驗結果ID
		{
			get
			{
				return this._檢驗結果ID;
			}
			set
			{
				if ((this._檢驗結果ID != value))
				{
					this.On檢驗結果IDChanging(value);
					this.SendPropertyChanging();
					this._檢驗結果ID = value;
					this.SendPropertyChanged("檢驗結果ID");
					this.On檢驗結果IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_提醒天數ID", DbType="Int NOT NULL")]
		public int 提醒天數ID
		{
			get
			{
				return this._提醒天數ID;
			}
			set
			{
				if ((this._提醒天數ID != value))
				{
					this.On提醒天數IDChanging(value);
					this.SendPropertyChanging();
					this._提醒天數ID = value;
					this.SendPropertyChanged("提醒天數ID");
					this.On提醒天數IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_時段ID", DbType="Int")]
		public System.Nullable<int> 時段ID
		{
			get
			{
				return this._時段ID;
			}
			set
			{
				if ((this._時段ID != value))
				{
					this.On時段IDChanging(value);
					this.SendPropertyChanging();
					this._時段ID = value;
					this.SendPropertyChanged("時段ID");
					this.On時段IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_日期", DbType="Date NOT NULL")]
		public System.DateTime 日期
		{
			get
			{
				return this._日期;
			}
			set
			{
				if ((this._日期 != value))
				{
					this.On日期Changing(value);
					this.SendPropertyChanging();
					this._日期 = value;
					this.SendPropertyChanged("日期");
					this.On日期Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結果值", DbType="NVarChar(50)")]
		public string 結果值
		{
			get
			{
				return this._結果值;
			}
			set
			{
				if ((this._結果值 != value))
				{
					this.On結果值Changing(value);
					this.SendPropertyChanging();
					this._結果值 = value;
					this.SendPropertyChanged("結果值");
					this.On結果值Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
		public string 備註
		{
			get
			{
				return this._備註;
			}
			set
			{
				if ((this._備註 != value))
				{
					this.On備註Changing(value);
					this.SendPropertyChanging();
					this._備註 = value;
					this.SendPropertyChanged("備註");
					this.On備註Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_提醒了沒", DbType="Bit")]
		public System.Nullable<bool> 提醒了沒
		{
			get
			{
				return this._提醒了沒;
			}
			set
			{
				if ((this._提醒了沒 != value))
				{
					this.On提醒了沒Changing(value);
					this.SendPropertyChanging();
					this._提醒了沒 = value;
					this.SendPropertyChanged("提醒了沒");
					this.On提醒了沒Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamSchedule_ExamCalender", Storage="_ExamSchedule", ThisKey="排程ID", OtherKey="排程ID", IsForeignKey=true)]
		public ExamSchedule ExamSchedule
		{
			get
			{
				return this._ExamSchedule.Entity;
			}
			set
			{
				ExamSchedule previousValue = this._ExamSchedule.Entity;
				if (((previousValue != value) 
							|| (this._ExamSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamSchedule.Entity = null;
						previousValue.ExamCalenders.Remove(this);
					}
					this._ExamSchedule.Entity = value;
					if ((value != null))
					{
						value.ExamCalenders.Add(this);
						this._排程ID = value.排程ID;
					}
					else
					{
						this._排程ID = default(int);
					}
					this.SendPropertyChanged("ExamSchedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.View_ExamCalender")]
	public partial class View_ExamCalender
	{
		
		private System.Nullable<bool> _已提醒;
		
		private int _行事曆ID;
		
		private System.Nullable<int> _病歷號碼;
		
		private string _病患姓名;
		
		private string _檢驗項目;
		
		private System.DateTime _檢驗日期;
		
		private string _狀態;
		
		private string _備註;
		
		private string _檢驗結果;
		
		private string _結果值;
		
		private int _提早天數;
		
		public View_ExamCalender()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_已提醒", DbType="Bit")]
		public System.Nullable<bool> 已提醒
		{
			get
			{
				return this._已提醒;
			}
			set
			{
				if ((this._已提醒 != value))
				{
					this._已提醒 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_行事曆ID", DbType="Int NOT NULL")]
		public int 行事曆ID
		{
			get
			{
				return this._行事曆ID;
			}
			set
			{
				if ((this._行事曆ID != value))
				{
					this._行事曆ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病歷號碼", DbType="Int")]
		public System.Nullable<int> 病歷號碼
		{
			get
			{
				return this._病歷號碼;
			}
			set
			{
				if ((this._病歷號碼 != value))
				{
					this._病歷號碼 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_病患姓名", DbType="NVarChar(10)")]
		public string 病患姓名
		{
			get
			{
				return this._病患姓名;
			}
			set
			{
				if ((this._病患姓名 != value))
				{
					this._病患姓名 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗項目", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 檢驗項目
		{
			get
			{
				return this._檢驗項目;
			}
			set
			{
				if ((this._檢驗項目 != value))
				{
					this._檢驗項目 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗日期", DbType="Date NOT NULL")]
		public System.DateTime 檢驗日期
		{
			get
			{
				return this._檢驗日期;
			}
			set
			{
				if ((this._檢驗日期 != value))
				{
					this._檢驗日期 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_狀態", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string 狀態
		{
			get
			{
				return this._狀態;
			}
			set
			{
				if ((this._狀態 != value))
				{
					this._狀態 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_備註", DbType="NVarChar(MAX)")]
		public string 備註
		{
			get
			{
				return this._備註;
			}
			set
			{
				if ((this._備註 != value))
				{
					this._備註 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗結果", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string 檢驗結果
		{
			get
			{
				return this._檢驗結果;
			}
			set
			{
				if ((this._檢驗結果 != value))
				{
					this._檢驗結果 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_結果值", DbType="NVarChar(50)")]
		public string 結果值
		{
			get
			{
				return this._結果值;
			}
			set
			{
				if ((this._結果值 != value))
				{
					this._結果值 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_提早天數", DbType="Int NOT NULL")]
		public int 提早天數
		{
			get
			{
				return this._提早天數;
			}
			set
			{
				if ((this._提早天數 != value))
				{
					this._提早天數 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Divisions")]
	public partial class Divisions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _科別ID;
		
		private string _科別名;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On科別IDChanging(int value);
    partial void On科別IDChanged();
    partial void On科別名Changing(string value);
    partial void On科別名Changed();
    #endregion
		
		public Divisions()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_科別ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 科別ID
		{
			get
			{
				return this._科別ID;
			}
			set
			{
				if ((this._科別ID != value))
				{
					this.On科別IDChanging(value);
					this.SendPropertyChanging();
					this._科別ID = value;
					this.SendPropertyChanged("科別ID");
					this.On科別IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_科別名", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string 科別名
		{
			get
			{
				return this._科別名;
			}
			set
			{
				if ((this._科別名 != value))
				{
					this.On科別名Changing(value);
					this.SendPropertyChanging();
					this._科別名 = value;
					this.SendPropertyChanged("科別名");
					this.On科別名Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamCategories")]
	public partial class ExamCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _檢驗類別ID;
		
		private string _檢驗類別名稱;
		
		private EntitySet<ExamOverview> _ExamOverview;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void On檢驗類別IDChanging(int value);
    partial void On檢驗類別IDChanged();
    partial void On檢驗類別名稱Changing(string value);
    partial void On檢驗類別名稱Changed();
    #endregion
		
		public ExamCategories()
		{
			this._ExamOverview = new EntitySet<ExamOverview>(new Action<ExamOverview>(this.attach_ExamOverview), new Action<ExamOverview>(this.detach_ExamOverview));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗類別ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 檢驗類別ID
		{
			get
			{
				return this._檢驗類別ID;
			}
			set
			{
				if ((this._檢驗類別ID != value))
				{
					this.On檢驗類別IDChanging(value);
					this.SendPropertyChanging();
					this._檢驗類別ID = value;
					this.SendPropertyChanged("檢驗類別ID");
					this.On檢驗類別IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_檢驗類別名稱", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string 檢驗類別名稱
		{
			get
			{
				return this._檢驗類別名稱;
			}
			set
			{
				if ((this._檢驗類別名稱 != value))
				{
					this.On檢驗類別名稱Changing(value);
					this.SendPropertyChanging();
					this._檢驗類別名稱 = value;
					this.SendPropertyChanged("檢驗類別名稱");
					this.On檢驗類別名稱Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamCategories_ExamOverview", Storage="_ExamOverview", ThisKey="檢驗類別ID", OtherKey="檢驗類別ID")]
		public EntitySet<ExamOverview> ExamOverview
		{
			get
			{
				return this._ExamOverview;
			}
			set
			{
				this._ExamOverview.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamOverview(ExamOverview entity)
		{
			this.SendPropertyChanging();
			entity.ExamCategories = this;
		}
		
		private void detach_ExamOverview(ExamOverview entity)
		{
			this.SendPropertyChanging();
			entity.ExamCategories = null;
		}
	}
}
#pragma warning restore 1591
